# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-01 14:56+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../cpython/Doc/library/asyncio-queue.rst:4
msgid "Queues"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:6
msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:8
msgid "Queues:"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:10
msgid ":class:`Queue`"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:11
msgid ":class:`PriorityQueue`"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:12
msgid ":class:`LifoQueue`"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:14
msgid "asyncio queue API was designed to be close to classes of the :mod:`queue` module (:class:`~queue.Queue`, :class:`~queue.PriorityQueue`, :class:`~queue.LifoQueue`), but it has no *timeout* parameter. The :func:`asyncio.wait_for` function can be used to cancel a task after a timeout."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:20
msgid "Queue"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:24
msgid "A queue, useful for coordinating producer and consumer coroutines."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:26
msgid "If *maxsize* is less than or equal to zero, the queue size is infinite. If it is an integer greater than ``0``, then ``await put()`` will block when the queue reaches *maxsize*, until an item is removed by :meth:`get`."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:30
msgid "Unlike the standard library :mod:`queue`, you can reliably know this Queue's size with :meth:`qsize`, since your single-threaded asyncio application won't be interrupted between calling :meth:`qsize` and doing an operation on the Queue."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:35
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:37
msgid "New :meth:`join` and :meth:`task_done` methods."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:42
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:46
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:50
msgid "If the Queue was initialized with ``maxsize=0`` (the default), then :meth:`full()` is never ``True``."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:55
msgid "Remove and return an item from the queue. If queue is empty, wait until an item is available."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:58
#: ../cpython/Doc/library/asyncio-queue.rst:81
#: ../cpython/Doc/library/asyncio-queue.rst:90
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:62
msgid "The :meth:`empty` method."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:66
msgid "Remove and return an item from the queue."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:68
msgid "Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:73
msgid "Block until all items in the queue have been gotten and processed."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:75
msgid "The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls :meth:`task_done` to indicate that the item was retrieved and all work on it is complete.  When the count of unfinished tasks drops to zero, :meth:`join` unblocks."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:87
msgid "Put an item into the queue. If the queue is full, wait until a free slot is available before adding item."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:94
msgid "The :meth:`full` method."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:98
msgid "Put an item into the queue without blocking."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:100
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:104
msgid "Number of items in the queue."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:108
msgid "Indicate that a formerly enqueued task is complete."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:110
msgid "Used by queue consumers. For each :meth:`~Queue.get` used to fetch a task, a subsequent call to :meth:`task_done` tells the queue that the processing on the task is complete."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:114
msgid "If a :meth:`join` is currently blocking, it will resume when all items have been processed (meaning that a :meth:`task_done` call was received for every item that had been :meth:`~Queue.put` into the queue)."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:118
msgid "Raises :exc:`ValueError` if called more times than there were items placed in the queue."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:125
msgid "Number of items allowed in the queue."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:129
msgid "PriorityQueue"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:133
msgid "A subclass of :class:`Queue`; retrieves entries in priority order (lowest first)."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:136
msgid "Entries are typically tuples of the form: (priority number, data)."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:140
msgid "LifoQueue"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:144
msgid "A subclass of :class:`Queue` that retrieves most recently added entries first."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:149
msgid "Exceptions"
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:153
msgid "Exception raised when the :meth:`~Queue.get_nowait` method is called on a :class:`Queue` object which is empty."
msgstr ""

#: ../cpython/Doc/library/asyncio-queue.rst:159
msgid "Exception raised when the :meth:`~Queue.put_nowait` method is called on a :class:`Queue` object which is full."
msgstr ""

