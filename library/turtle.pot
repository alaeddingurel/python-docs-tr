# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-01 14:56+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../cpython/Doc/library/turtle.rst:3
msgid ":mod:`turtle` --- Turtle graphics"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:10
msgid "**Source code:** :source:`Lib/turtle.py`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:20
msgid "Introduction"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:22
msgid "Turtle graphics is a popular way for introducing programming to kids.  It was part of the original Logo programming language developed by Wally Feurzig and Seymour Papert in 1966."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:26
msgid "Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an ``import turtle``, give it the command ``turtle.forward(15)``, and it moves (on-screen!) 15 pixels in the direction it is facing, drawing a line as it moves.  Give it the command ``turtle.right(25)``, and it rotates in-place 25 degrees clockwise."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:33
msgid "Turtle can draw intricate shapes using programs that repeat simple moves."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:41
msgid "By combining together these and similar commands, intricate shapes and pictures can easily be drawn."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:44
msgid "The :mod:`turtle` module is an extended reimplementation of the same-named module from the Python standard distribution up to version Python 2.5."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:47
msgid "It tries to keep the merits of the old turtle module and to be (nearly) 100% compatible with it.  This means in the first place to enable the learning programmer to use all the commands, classes and methods interactively when using the module from within IDLE run with the ``-n`` switch."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:52
msgid "The turtle module provides turtle graphics primitives, in both object-oriented and procedure-oriented ways.  Because it uses :mod:`tkinter` for the underlying graphics, it needs a version of Python installed with Tk support."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:56
msgid "The object-oriented interface uses essentially two+two classes:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:58
msgid "The :class:`TurtleScreen` class defines graphics windows as a playground for the drawing turtles.  Its constructor needs a :class:`tkinter.Canvas` or a :class:`ScrolledCanvas` as argument.  It should be used when :mod:`turtle` is used as part of some application."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:63
msgid "The function :func:`Screen` returns a singleton object of a :class:`TurtleScreen` subclass. This function should be used when :mod:`turtle` is used as a standalone tool for doing graphics. As a singleton object, inheriting from its class is not possible."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:68
msgid "All methods of TurtleScreen/Screen also exist as functions, i.e. as part of the procedure-oriented interface."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:71
msgid ":class:`RawTurtle` (alias: :class:`RawPen`) defines Turtle objects which draw on a :class:`TurtleScreen`.  Its constructor needs a Canvas, ScrolledCanvas or TurtleScreen as argument, so the RawTurtle objects know where to draw."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:75
msgid "Derived from RawTurtle is the subclass :class:`Turtle` (alias: :class:`Pen`), which draws on \"the\" :class:`Screen` instance which is automatically created, if not already present."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:79
msgid "All methods of RawTurtle/Turtle also exist as functions, i.e. part of the procedure-oriented interface."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:82
msgid "The procedural interface provides functions which are derived from the methods of the classes :class:`Screen` and :class:`Turtle`.  They have the same names as the corresponding methods.  A screen object is automatically created whenever a function derived from a Screen method is called.  An (unnamed) turtle object is automatically created whenever any of the functions derived from a Turtle method is called."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:89
msgid "To use multiple turtles on a screen one has to use the object-oriented interface."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:92
msgid "In the following documentation the argument list for functions is given. Methods, of course, have the additional first argument *self* which is omitted here."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:98
msgid "Overview of available Turtle and Screen methods"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:101
msgid "Turtle methods"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:132
#: ../cpython/Doc/library/turtle.rst:242
msgid "Turtle motion"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:120
msgid "Move and draw"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`forward` | :func:`fd`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`right` | :func:`rt`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`left` | :func:`lt`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`setx`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`sety`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`setheading` | :func:`seth`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`home`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:2370
msgid ":func:`circle`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`dot`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:2348
msgid ":func:`stamp`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`clearstamp`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`clearstamps`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`undo`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`speed`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:128
#: ../cpython/Doc/library/turtle.rst:623
msgid "Tell Turtle's state"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`position` | :func:`pos`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`towards`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`xcor`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`ycor`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`heading`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`distance`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:132
msgid "Setting and measurement"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`degrees`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`radians`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:155
#: ../cpython/Doc/library/turtle.rst:765
msgid "Pen control"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:140
#: ../cpython/Doc/library/turtle.rst:768
msgid "Drawing state"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`pensize` | :func:`width`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`pen`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`isdown`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:145
#: ../cpython/Doc/library/turtle.rst:857
msgid "Color control"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`color`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`pencolor`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`fillcolor`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:150
#: ../cpython/Doc/library/turtle.rst:986
msgid "Filling"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`filling`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`begin_fill`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`end_fill`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:155
#: ../cpython/Doc/library/turtle.rst:1025
msgid "More drawing control"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`reset`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`clear`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`write`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:172
#: ../cpython/Doc/library/turtle.rst:1070
msgid "Turtle state"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:161
#: ../cpython/Doc/library/turtle.rst:1073
msgid "Visibility"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`showturtle` | :func:`st`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`hideturtle` | :func:`ht`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`isvisible`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:172
#: ../cpython/Doc/library/turtle.rst:1110
msgid "Appearance"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`shape`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`resizemode`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`shearfactor`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`settiltangle`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`tiltangle`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`tilt`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`shapetransform`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`get_shapepoly`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:177
#: ../cpython/Doc/library/turtle.rst:1306
msgid "Using events"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:2342
msgid ":func:`onclick`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`onrelease`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:2325
msgid ":func:`ondrag`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:188
#: ../cpython/Doc/library/turtle.rst:1376
msgid "Special Turtle methods"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`begin_poly`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`end_poly`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`get_poly`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:2361
msgid ":func:`clone`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`getturtle` | :func:`getpen`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`getscreen`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`setundobuffer`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`undobufferentries`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:191
msgid "Methods of TurtleScreen/Screen"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:199
#: ../cpython/Doc/library/turtle.rst:1521
msgid "Window control"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`bgcolor`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`bgpic`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`clear` | :func:`clearscreen`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`reset` | :func:`resetscreen`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`screensize`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`setworldcoordinates`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:204
#: ../cpython/Doc/library/turtle.rst:1635
msgid "Animation control"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`delay`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`tracer`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`update`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:212
#: ../cpython/Doc/library/turtle.rst:1686
msgid "Using screen events"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`listen`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`onkey` | :func:`onkeyrelease`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`onkeypress`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`ontimer`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`mainloop` | :func:`done`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:222
#: ../cpython/Doc/library/turtle.rst:1827
msgid "Settings and special methods"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`mode`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`colormode`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`getcanvas`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`getshapes`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`register_shape` | :func:`addshape`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`turtles`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`window_height`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`window_width`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:226
#: ../cpython/Doc/library/turtle.rst:1791
msgid "Input methods"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`textinput`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`numinput`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:233
msgid "Methods specific to Screen"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`bye`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`exitonclick`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`setup`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
msgid ":func:`title`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:236
msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:238
msgid "Most of the examples in this section refer to a Turtle instance called ``turtle``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
#: ../cpython/Doc/library/turtle.rst:0
msgid "Parameters"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:247
#: ../cpython/Doc/library/turtle.rst:290
#: ../cpython/Doc/library/turtle.rst:313
#: ../cpython/Doc/library/turtle.rst:369
#: ../cpython/Doc/library/turtle.rst:390
#: ../cpython/Doc/library/turtle.rst:411
msgid "a number (integer or float)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:249
msgid "Move the turtle forward by the specified *distance*, in the direction the turtle is headed."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:268
#: ../cpython/Doc/library/turtle.rst:458
#: ../cpython/Doc/library/turtle.rst:721
#: ../cpython/Doc/library/turtle.rst:1205
#: ../cpython/Doc/library/turtle.rst:1223
msgid "a number"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:270
msgid "Move the turtle backward by *distance*, opposite to the direction the turtle is headed.  Do not change the turtle's heading."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:292
msgid "Turn turtle right by *angle* units.  (Units are by default degrees, but can be set via the :func:`degrees` and :func:`radians` functions.)  Angle orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:315
msgid "Turn turtle left by *angle* units.  (Units are by default degrees, but can be set via the :func:`degrees` and :func:`radians` functions.)  Angle orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:337
msgid "a number or a pair/vector of numbers"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:338
msgid "a number or ``None``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:340
msgid "If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D` (e.g. as returned by :func:`pos`)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:343
msgid "Move turtle to an absolute position.  If the pen is down, draw line.  Do not change the turtle's orientation."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:371
msgid "Set the turtle's first coordinate to *x*, leave second coordinate unchanged."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:392
msgid "Set the turtle's second coordinate to *y*, leave first coordinate unchanged."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:413
msgid "Set the orientation of the turtle to *to_angle*.  Here are some common directions in degrees:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:417
msgid "standard mode"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:417
msgid "logo mode"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:419
msgid "0 - east"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:419
msgid "0 - north"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:420
msgid "90 - north"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:420
msgid "90 - east"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:421
msgid "180 - west"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:421
msgid "180 - south"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:422
msgid "270 - south"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:422
msgid "270 - west"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:434
msgid "Move turtle to the origin -- coordinates (0,0) -- and set its heading to its start-orientation (which depends on the mode, see :func:`mode`)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:459
msgid "a number (or ``None``)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:460
#: ../cpython/Doc/library/turtle.rst:550
msgid "an integer (or ``None``)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:462
msgid "Draw a circle with given *radius*.  The center is *radius* units left of the turtle; *extent* -- an angle -- determines which part of the circle is drawn.  If *extent* is not given, draw the entire circle.  If *extent* is not a full circle, one endpoint of the arc is the current pen position.  Draw the arc in counterclockwise direction if *radius* is positive, otherwise in clockwise direction.  Finally the direction of the turtle is changed by the amount of *extent*."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:470
msgid "As the circle is approximated by an inscribed regular polygon, *steps* determines the number of steps to use.  If not given, it will be calculated automatically.  May be used to draw regular polygons."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:495
msgid "an integer >= 1 (if given)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:496
msgid "a colorstring or a numeric color tuple"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:498
msgid "Draw a circular dot with diameter *size*, using *color*.  If *size* is not given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:515
msgid "Stamp a copy of the turtle shape onto the canvas at the current turtle position.  Return a stamp_id for that stamp, which can be used to delete it by calling ``clearstamp(stamp_id)``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:529
msgid "an integer, must be return value of previous :func:`stamp` call"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:532
msgid "Delete stamp with given *stampid*."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:552
msgid "Delete all or first/last *n* of turtle's stamps.  If *n* is ``None``, delete all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete last *n* stamps."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:575
msgid "Undo (repeatedly) the last turtle action(s).  Number of available undo actions is determined by the size of the undobuffer."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:589
msgid "an integer in the range 0..10 or a speedstring (see below)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:591
msgid "Set the turtle's speed to an integer value in the range 0..10.  If no argument is given, return current speed."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:594
msgid "If input is a number greater than 10 or smaller than 0.5, speed is set to 0.  Speedstrings are mapped to speedvalues as follows:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:597
msgid "\"fastest\":  0"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:598
msgid "\"fast\":  10"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:599
msgid "\"normal\":  6"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:600
msgid "\"slow\":  3"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:601
msgid "\"slowest\":  1"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:603
msgid "Speeds from 1 to 10 enforce increasingly faster animation of line drawing and turtle turning."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:606
msgid "Attention: *speed* = 0 means that *no* animation takes place. forward/back makes turtle jump and likewise left/right make the turtle turn instantly."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:628
msgid "Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:638
#: ../cpython/Doc/library/turtle.rst:697
msgid "a number or a pair/vector of numbers or a turtle instance"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:639
#: ../cpython/Doc/library/turtle.rst:698
msgid "a number if *x* is a number, else ``None``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:641
msgid "Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle.  This depends on the turtle's start orientation which depends on the mode - \"standard\"/\"world\" or \"logo\")."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:654
msgid "Return the turtle's x coordinate."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:669
msgid "Return the turtle's y coordinate."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:684
msgid "Return the turtle's current heading (value depends on the turtle mode, see :func:`mode`)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:700
msgid "Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:717
msgid "Settings for measurement"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:723
msgid "Set angle measurement units, i.e. set number of \"degrees\" for a full circle. Default value is 360 degrees."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:745
msgid "Set the angle measurement units to radians.  Equivalent to ``degrees(2*math.pi)``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:774
msgid "Pull the pen down -- drawing when moving."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:781
msgid "Pull the pen up -- no drawing when moving."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:787
msgid "a positive number"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:789
msgid "Set the line thickness to *width* or return it.  If resizemode is set to \"auto\" and turtleshape is a polygon, that polygon is drawn with the same line thickness.  If no argument is given, the current pensize is returned."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:802
msgid "a dictionary with some or all of the below listed keys"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:803
msgid "one or more keyword-arguments with the below listed keys as keywords"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:805
msgid "Return or set the pen's attributes in a \"pen-dictionary\" with the following key/value pairs:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:808
msgid "\"shown\": True/False"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:809
msgid "\"pendown\": True/False"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:810
msgid "\"pencolor\": color-string or color-tuple"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:811
msgid "\"fillcolor\": color-string or color-tuple"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:812
msgid "\"pensize\": positive number"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:813
msgid "\"speed\": number in range 0..10"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:814
msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:815
msgid "\"stretchfactor\": (positive number, positive number)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:816
msgid "\"outline\": positive number"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:817
msgid "\"tilt\": number"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:819
msgid "This dictionary can be used as argument for a subsequent call to :func:`pen` to restore the former pen-state.  Moreover one or more of these attributes can be provided as keyword-arguments.  This can be used to set several pen attributes in one statement."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:844
msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:861
msgid "Return or set the pencolor."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:863
#: ../cpython/Doc/library/turtle.rst:911
msgid "Four input formats are allowed:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:868
msgid "``pencolor()``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:866
msgid "Return the current pencolor as color specification string or as a tuple (see example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:872
msgid "``pencolor(colorstring)``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:871
msgid "Set pencolor to *colorstring*, which is a Tk color specification string, such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:877
msgid "``pencolor((r, g, b))``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:875
msgid "Set pencolor to the RGB color represented by the tuple of *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:884
msgid "``pencolor(r, g, b)``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:880
msgid "Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:883
msgid "If turtleshape is a polygon, the outline of that polygon is drawn with the newly set pencolor."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:909
msgid "Return or set the fillcolor."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:916
msgid "``fillcolor()``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:914
msgid "Return the current fillcolor as color specification string, possibly in tuple format (see example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:920
msgid "``fillcolor(colorstring)``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:919
msgid "Set fillcolor to *colorstring*, which is a Tk color specification string, such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:925
msgid "``fillcolor((r, g, b))``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:923
msgid "Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:932
msgid "``fillcolor(r, g, b)``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:928
msgid "Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:931
msgid "If turtleshape is a polygon, the interior of that polygon is drawn with the newly set fillcolor."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:951
msgid "Return or set pencolor and fillcolor."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:953
msgid "Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:959
msgid "``color()``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:957
msgid "Return the current pencolor and the current fillcolor as a pair of color specification strings or tuples as returned by :func:`pencolor` and :func:`fillcolor`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:963
msgid "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:962
msgid "Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the given value."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:970
msgid "``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:966
msgid "Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` and analogously if the other input format is used."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:969
msgid "If turtleshape is a polygon, outline and interior of that polygon is drawn with the newly set colors."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:982
msgid "See also: Screen method :func:`colormode`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:995
msgid "Return fillstate (``True`` if filling, ``False`` else)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1009
msgid "To be called just before drawing a shape to be filled."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1014
msgid "Fill the shape drawn after the last call to :func:`begin_fill`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1029
msgid "Delete the turtle's drawings from the screen, re-center the turtle and set variables to the default values."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1049
msgid "Delete the turtle's drawings from the screen.  Do not move turtle.  State and position of the turtle as well as drawings of other turtles are not affected."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1055
msgid "object to be written to the TurtleScreen"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1056
msgid "True/False"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1057
msgid "one of the strings \"left\", \"center\" or right\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1058
msgid "a triple (fontname, fontsize, fonttype)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1060
msgid "Write text - the string representation of *arg* - at the current turtle position according to *align* (\"left\", \"center\" or right\") and with the given font.  If *move* is true, the pen is moved to the bottom-right corner of the text.  By default, *move* is ``False``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1078
msgid "Make the turtle invisible.  It's a good idea to do this while you're in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1090
msgid "Make the turtle visible."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1099
msgid "Return ``True`` if the Turtle is shown, ``False`` if it's hidden."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1114
msgid "a string which is a valid shapename"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1116
msgid "Set turtle shape to shape with given *name* or, if name is not given, return name of current shape.  Shape with *name* must exist in the TurtleScreen's shape dictionary.  Initially there are the following polygon shapes: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".  To learn about how to deal with shapes see Screen method :func:`register_shape`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1133
msgid "one of the strings \"auto\", \"user\", \"noresize\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1135
msgid "Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  If *rmode* is not given, return current resizemode.  Different resizemodes have the following effects:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1139
msgid "\"auto\": adapts the appearance of the turtle corresponding to the value of pensize."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1140
msgid "\"user\": adapts the appearance of the turtle according to the values of stretchfactor and outlinewidth (outline), which are set by :func:`shapesize`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1143
msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1145
msgid "resizemode(\"user\") is called by :func:`shapesize` when used with arguments."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1159
#: ../cpython/Doc/library/turtle.rst:1160
#: ../cpython/Doc/library/turtle.rst:1161
msgid "positive number"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1163
msgid "Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set resizemode to \"user\".  If and only if resizemode is set to \"user\", the turtle will be displayed stretched according to its stretchfactors: *stretch_wid* is stretchfactor perpendicular to its orientation, *stretch_len* is stretchfactor in direction of its orientation, *outline* determines the width of the shapes's outline."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1185
#: ../cpython/Doc/library/turtle.rst:1810
#: ../cpython/Doc/library/turtle.rst:1811
#: ../cpython/Doc/library/turtle.rst:1812
msgid "number (optional)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1187
msgid "Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do *not* change the turtle's heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1207
msgid "Rotate the turtleshape by *angle* from its current tilt-angle, but do *not* change the turtle's heading (direction of movement)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1225
msgid "Rotate the turtleshape to point in the direction specified by *angle*, regardless of its current tilt-angle.  *Do not* change the turtle's heading (direction of movement)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1244
#: ../cpython/Doc/library/turtle.rst:1266
#: ../cpython/Doc/library/turtle.rst:1267
#: ../cpython/Doc/library/turtle.rst:1268
#: ../cpython/Doc/library/turtle.rst:1269
msgid "a number (optional)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1246
msgid "Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do *not* change the turtle's heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1271
msgid "Set or return the current transformation matrix of the turtle shape."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1273
msgid "If none of the matrix elements are given, return the transformation matrix as a tuple of 4 elements. Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row t11, t12 and second row t21, 22. The determinant t11 * t22 - t12 * t21 must not be zero, otherwise an error is raised. Modify stretchfactor, shearfactor and tiltangle according to the given matrix."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1294
msgid "Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1310
#: ../cpython/Doc/library/turtle.rst:1331
#: ../cpython/Doc/library/turtle.rst:1355
#: ../cpython/Doc/library/turtle.rst:1736
msgid "a function with two arguments which will be called with the coordinates of the clicked point on the canvas"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1312
#: ../cpython/Doc/library/turtle.rst:1333
#: ../cpython/Doc/library/turtle.rst:1357
#: ../cpython/Doc/library/turtle.rst:1738
msgid "number of the mouse-button, defaults to 1 (left mouse button)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1313
#: ../cpython/Doc/library/turtle.rst:1334
#: ../cpython/Doc/library/turtle.rst:1358
#: ../cpython/Doc/library/turtle.rst:1739
msgid "``True`` or ``False`` -- if ``True``, a new binding will be added, otherwise it will replace a former binding"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1316
msgid "Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, existing bindings are removed.  Example for the anonymous turtle, i.e. the procedural way:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1337
msgid "Bind *fun* to mouse-button-release events on this turtle.  If *fun* is ``None``, existing bindings are removed."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1361
msgid "Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, existing bindings are removed."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1364
msgid "Remark: Every sequence of mouse-move-events on a turtle is preceded by a mouse-click event on that turtle."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1371
msgid "Subsequently, clicking and dragging the Turtle will move it across the screen thereby producing handdrawings (if pen is down)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1380
msgid "Start recording the vertices of a polygon.  Current turtle position is first vertex of polygon."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1386
msgid "Stop recording the vertices of a polygon.  Current turtle position is last vertex of polygon.  This will be connected with the first vertex."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1392
msgid "Return the last recorded polygon."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1410
msgid "Create and return a clone of the turtle with same position, heading and turtle properties."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1422
msgid "Return the Turtle object itself.  Only reasonable use: as a function to return the \"anonymous turtle\":"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1435
msgid "Return the :class:`TurtleScreen` object the turtle is drawing on. TurtleScreen methods can then be called for that object."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1448
msgid "an integer or ``None``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1450
msgid "Set or disable undobuffer.  If *size* is an integer an empty undobuffer of given size is installed.  *size* gives the maximum number of turtle actions that can be undone by the :func:`undo` method/function.  If *size* is ``None``, the undobuffer is disabled."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1462
msgid "Return number of entries in the undobuffer."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1474
msgid "Compound shapes"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1476
msgid "To use compound turtle shapes, which consist of several polygons of different color, you must use the helper class :class:`Shape` explicitly as described below:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1480
msgid "Create an empty Shape object of type \"compound\"."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1481
msgid "Add as many components to this object as desired, using the :meth:`addcomponent` method."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1484
msgid "For example:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1494
msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1504
msgid "The :class:`Shape` class is used internally by the :func:`register_shape` method in different ways.  The application programmer has to deal with the Shape class *only* when using compound shapes like shown above!"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1510
msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1512
msgid "Most of the examples in this section refer to a TurtleScreen instance called ``screen``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1525
msgid "a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1529
msgid "Set or return background color of the TurtleScreen."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1543
msgid "a string, name of a gif-file or ``\"nopic\"``, or ``None``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1545
msgid "Set background image or return name of current backgroundimage.  If *picname* is a filename, set the corresponding image as background.  If *picname* is ``\"nopic\"``, delete background image, if present.  If *picname* is ``None``, return the filename of the current backgroundimage. ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1560
msgid "Delete all drawings and all turtles from the TurtleScreen.  Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1565
msgid "This TurtleScreen method is available as a global function only under the name ``clearscreen``.  The global function ``clear`` is a different one derived from the Turtle method ``clear``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1573
msgid "Reset all Turtles on the Screen to their initial state."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1576
msgid "This TurtleScreen method is available as a global function only under the name ``resetscreen``.  The global function ``reset`` is another one derived from the Turtle method ``reset``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1583
msgid "positive integer, new width of canvas in pixels"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1584
msgid "positive integer, new height of canvas in pixels"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1585
msgid "colorstring or color-tuple, new background color"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1587
msgid "If no arguments are given, return current (canvaswidth, canvasheight).  Else resize the canvas the turtles are drawing on.  Do not alter the drawing window.  To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1599
msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1604
msgid "a number, x-coordinate of lower left corner of canvas"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1605
msgid "a number, y-coordinate of lower left corner of canvas"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1606
msgid "a number, x-coordinate of upper right corner of canvas"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1607
msgid "a number, y-coordinate of upper right corner of canvas"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1609
msgid "Set up user-defined coordinate system and switch to mode \"world\" if necessary.  This performs a ``screen.reset()``.  If mode \"world\" is already active, all drawings are redrawn according to the new coordinates."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1613
msgid "**ATTENTION**: in user-defined coordinate systems angles may appear distorted."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1639
msgid "positive integer"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1641
msgid "Set or return the drawing *delay* in milliseconds.  (This is approximately the time interval between two consecutive canvas updates.)  The longer the drawing delay, the slower the animation."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1645
msgid "Optional argument:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1658
#: ../cpython/Doc/library/turtle.rst:1659
msgid "nonnegative integer"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1661
msgid "Turn turtle animation on/off and set delay for update drawings.  If *n* is given, only each n-th regular screen update is really performed.  (Can be used to accelerate the drawing of complex graphics.)  When called without arguments, returns the currently stored value of n. Second argument sets delay value (see :func:`delay`)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1680
msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1682
msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1690
msgid "Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments are provided in order to be able to pass :func:`listen` to the onclick method."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1697
#: ../cpython/Doc/library/turtle.rst:1716
msgid "a function with no arguments or ``None``"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1698
#: ../cpython/Doc/library/turtle.rst:1717
msgid "a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1700
msgid "Bind *fun* to key-release event of key.  If *fun* is ``None``, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1719
msgid "Bind *fun* to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method :func:`listen`.)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1742
msgid "Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, existing bindings are removed."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1745
msgid "Example for a TurtleScreen instance named ``screen`` and a Turtle instance named turtle:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1755
msgid "This TurtleScreen method is available as a global function only under the name ``onscreenclick``.  The global function ``onclick`` is another one derived from the Turtle method ``onclick``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1762
msgid "a function with no arguments"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1763
msgid "a number >= 0"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1765
msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1782
msgid "Starts event loop - calling Tkinter's mainloop function. Must be the last statement in a turtle graphics program. Must *not* be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics. ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1795
#: ../cpython/Doc/library/turtle.rst:1796
#: ../cpython/Doc/library/turtle.rst:1808
#: ../cpython/Doc/library/turtle.rst:1809
msgid "string"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1798
msgid "Pop up a dialog window for input of a string. Parameter title is the title of the dialog window, prompt is a text mostly describing what information to input. Return the string input. If the dialog is canceled, return ``None``. ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1814
msgid "Pop up a dialog window for input of a number. title is the title of the dialog window, prompt is a text mostly describing what numerical information to input. default: default value, minval: minimum value for input, maxval: maximum value for input The number input must be in the range minval .. maxval if these are given. If not, a hint is issued and the dialog remains open for correction. Return the number input. If the dialog is canceled,  return ``None``. ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1831
msgid "one of the strings \"standard\", \"logo\" or \"world\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1833
msgid "Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset.  If mode is not given, current mode is returned."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1836
msgid "Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is compatible with most Logo turtle graphics.  Mode \"world\" uses user-defined \"world coordinates\". **Attention**: in this mode angles appear distorted if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1842
msgid "Mode"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1842
msgid "Initial turtle heading"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1842
msgid "positive angles"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1844
msgid "\"standard\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1844
msgid "to the right (east)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1844
msgid "counterclockwise"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1845
msgid "\"logo\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1845
msgid "upward    (north)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1845
msgid "clockwise"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1857
msgid "one of the values 1.0 or 255"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1859
msgid "Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b* values of color triples have to be in the range 0..\\ *cmode*."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1879
msgid "Return the Canvas of this TurtleScreen.  Useful for insiders who know what to do with a Tkinter Canvas."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1891
msgid "Return a list of names of all currently available turtle shapes."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1902
msgid "There are three different ways to call this function:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1904
msgid "*name* is the name of a gif-file and *shape* is ``None``: Install the corresponding image shape. ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1910
msgid "Image shapes *do not* rotate when turning the turtle, so they do not display the heading of the turtle!"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1913
msgid "*name* is an arbitrary string and *shape* is a tuple of pairs of coordinates: Install the corresponding polygon shape."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1920
msgid "*name* is an arbitrary string and shape is a (compound) :class:`Shape` object: Install the corresponding compound shape."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1923
msgid "Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1929
msgid "Return the list of turtles on the screen."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1939
msgid "Return the height of the turtle window. ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1947
msgid "Return the width of the turtle window. ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1956
msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1960
msgid "Shut the turtlegraphics window."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1965
msgid "Bind bye() method to mouse clicks on the Screen."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1968
msgid "If the value \"using_IDLE\" in the configuration dictionary is ``False`` (default value), also enter mainloop.  Remark: If IDLE with the ``-n`` switch (no subprocess) is used, this value should be set to ``True`` in :file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the client script."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1977
msgid "Set the size and position of the main window.  Default values of arguments are stored in the configuration dictionary and can be changed via a :file:`turtle.cfg` file."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1981
msgid "if an integer, a size in pixels, if a float, a fraction of the screen; default is 50% of screen"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1983
msgid "if an integer, the height in pixels, if a float, a fraction of the screen; default is 75% of screen"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1985
msgid "if positive, starting position in pixels from the left edge of the screen, if negative from the right edge, if ``None``, center window horizontally"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:1988
msgid "if positive, starting position in pixels from the top edge of the screen, if negative from the bottom edge, if ``None``, center window vertically"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2002
msgid "a string that is shown in the titlebar of the turtle graphics window"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2005
msgid "Set title of turtle window to *titlestring*."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2013
msgid "Public classes"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2019
msgid "a :class:`tkinter.Canvas`, a :class:`ScrolledCanvas` or a :class:`TurtleScreen`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2022
msgid "Create a turtle.  The turtle has all methods described above as \"methods of Turtle/RawTurtle\"."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2028
msgid "Subclass of RawTurtle, has the same interface but draws on a default :class:`Screen` object created automatically when needed for the first time."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2034
msgid "a :class:`tkinter.Canvas`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2036
msgid "Provides screen oriented methods like :func:`setbg` etc. that are described above."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2041
msgid "Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2046
msgid "some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas with scrollbars added"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2049
msgid "Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2054
msgid "one of the strings \"polygon\", \"image\", \"compound\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2056
msgid "Data structure modeling shapes.  The pair ``(type_, data)`` must follow this specification:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2061
msgid "*type_*"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2061
msgid "*data*"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2063
msgid "\"polygon\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2063
msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2064
msgid "\"image\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2064
msgid "an image  (in this form only used internally!)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2065
msgid "\"compound\""
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2065
msgid "``None`` (a compound shape has to be constructed using the :meth:`addcomponent` method)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2071
msgid "a polygon, i.e. a tuple of pairs of numbers"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2072
msgid "a color the *poly* will be filled with"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2073
msgid "a color for the poly's outline (if given)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2075
msgid "Example:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2084
msgid "See :ref:`compoundshapes`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2089
msgid "A two-dimensional vector class, used as a helper class for implementing turtle graphics.  May be useful for turtle graphics programs too.  Derived from tuple, so a vector is a tuple!"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2093
msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2095
msgid "``a + b`` vector addition"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2096
msgid "``a - b`` vector subtraction"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2097
msgid "``a * b`` inner product"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2098
msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2099
msgid "``abs(a)`` absolute value of a"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2100
msgid "``a.rotate(angle)`` rotation"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2104
msgid "Help and configuration"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2107
msgid "How to use help"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2109
msgid "The public methods of the Screen and Turtle classes are documented extensively via docstrings.  So these can be used as online-help via the Python help facilities:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2113
msgid "When using IDLE, tooltips show the signatures and first lines of the docstrings of typed in function-/method calls."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2116
msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2147
msgid "The docstrings of the functions which are derived from methods have a modified form::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2181
msgid "These modified docstrings are created automatically together with the function definitions that are derived from the methods at import time."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2186
msgid "Translation of docstrings into different languages"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2188
msgid "There is a utility to create a dictionary the keys of which are the method names and the values of which are the docstrings of the public methods of the classes Screen and Turtle."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2194
msgid "a string, used as filename"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2196
msgid "Create and write docstring-dictionary to a Python script with the given filename.  This function has to be called explicitly (it is not used by the turtle graphics classes).  The docstring dictionary will be written to the Python script :file:`{filename}.py`.  It is intended to serve as a template for translation of the docstrings into different languages."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2202
msgid "If you (or your students) want to use :mod:`turtle` with online help in your native language, you have to translate the docstrings and save the resulting file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2206
msgid "If you have an appropriate entry in your :file:`turtle.cfg` file this dictionary will be read in at import time and will replace the original English docstrings."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2209
msgid "At the time of this writing there are docstring dictionaries in German and in Italian.  (Requests please to glingl@aon.at.)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2215
msgid "How to configure Screen and Turtles"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2217
msgid "The built-in default configuration mimics the appearance and behaviour of the old turtle module in order to retain best possible compatibility with it."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2220
msgid "If you want to use a different configuration which better reflects the features of this module or which better fits to your needs, e.g. for use in a classroom, you can prepare a configuration file ``turtle.cfg`` which will be read at import time and modify the configuration according to its settings."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2225
msgid "The built in configuration would correspond to the following turtle.cfg::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2248
msgid "Short explanation of selected entries:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2250
msgid "The first four lines correspond to the arguments of the :meth:`Screen.setup` method."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2252
msgid "Line 5 and 6 correspond to the arguments of the method :meth:`Screen.screensize`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2254
msgid "*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For more info try ``help(shape)``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2256
msgid "If you want to use no fillcolor (i.e. make the turtle transparent), you have to write ``fillcolor = \"\"`` (but all nonempty strings must not have quotes in the cfg-file)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2259
msgid "If you want to reflect the turtle its state, you have to use ``resizemode = auto``."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2261
msgid "If you set e.g. ``language = italian`` the docstringdict :file:`turtle_docstringdict_italian.py` will be loaded at import time (if present on the import path, e.g. in the same directory as :mod:`turtle`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2264
msgid "The entries *exampleturtle* and *examplescreen* define the names of these objects as they occur in the docstrings.  The transformation of method-docstrings to function-docstrings will delete these names from the docstrings."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2268
msgid "*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and its -n switch (\"no subprocess\").  This will prevent :func:`exitonclick` to enter the mainloop."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2272
msgid "There can be a :file:`turtle.cfg` file in the directory where :mod:`turtle` is stored and an additional one in the current working directory.  The latter will override the settings of the first one."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2276
msgid "The :file:`Lib/turtledemo` directory contains a :file:`turtle.cfg` file.  You can study it as an example and see its effects when running the demos (preferably not from within the demo-viewer)."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2282
msgid ":mod:`turtledemo` --- Demo scripts"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2287
msgid "The :mod:`turtledemo` package includes a set of demo scripts.  These scripts can be run and viewed using the supplied demo viewer as follows::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2292
msgid "Alternatively, you can run the demo scripts individually.  For example, ::"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2296
msgid "The :mod:`turtledemo` package directory contains:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2298
msgid "A demo viewer :file:`__main__.py` which can be used to view the sourcecode of the scripts and run them at the same time."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2300
msgid "Multiple scripts demonstrating different features of the :mod:`turtle` module.  Examples can be accessed via the Examples menu.  They can also be run standalone."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2303
msgid "A :file:`turtle.cfg` file which serves as an example of how to write and use such files."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2306
msgid "The demo scripts are:"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2311
msgid "Name"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2311
msgid "Description"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2311
msgid "Features"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2313
msgid "bytedesign"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2313
msgid "complex classical turtle graphics pattern"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2313
msgid ":func:`tracer`, delay, :func:`update`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2316
msgid "chaos"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2316
msgid "graphs Verhulst dynamics, shows that computer's computations can generate results sometimes against the common sense expectations"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2316
msgid "world coordinates"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2322
msgid "clock"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2322
msgid "analog clock showing time of your computer"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2322
msgid "turtles as clock's hands, ontimer"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2325
msgid "colormixer"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2325
msgid "experiment with r, g, b"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2327
msgid "forest"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2327
msgid "3 breadth-first trees"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2327
msgid "randomization"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2329
msgid "fractalcurves"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2329
msgid "Hilbert & Koch curves"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2329
msgid "recursion"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2331
msgid "lindenmayer"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2331
msgid "ethnomathematics (indian kolams)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2331
msgid "L-System"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2334
msgid "minimal_hanoi"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2334
msgid "Towers of Hanoi"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2334
msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2338
msgid "nim"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2338
msgid "play the classical nim game with three heaps of sticks against the computer."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2338
msgid "turtles as nimsticks, event driven (mouse, keyboard)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2342
msgid "paint"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2342
msgid "super minimalistic drawing program"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2345
msgid "peace"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2345
msgid "elementary"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2345
msgid "turtle: appearance and animation"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2348
msgid "penrose"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2348
msgid "aperiodic tiling with kites and darts"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2351
msgid "planet_and_moon"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2351
msgid "simulation of gravitational system"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2351
msgid "compound shapes, :class:`Vec2D`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2354
msgid "round_dance"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2354
msgid "dancing turtles rotating pairwise in opposite direction"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2354
msgid "compound shapes, clone shapesize, tilt, get_shapepoly, update"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2358
msgid "sorting_animate"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2358
msgid "visual demonstration of different sorting methods"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2358
msgid "simple alignment, randomization"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2361
msgid "tree"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2361
msgid "a (graphical) breadth first tree (using generators)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2364
msgid "two_canvases"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2364
msgid "simple design"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2364
msgid "turtles on two canvases"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2367
msgid "wikipedia"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2367
msgid "a pattern from the wikipedia article on turtle graphics"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2367
msgid ":func:`clone`, :func:`undo`"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2370
msgid "yinyang"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2370
msgid "another elementary example"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2373
msgid "Have fun!"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2377
msgid "Changes since Python 2.6"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2379
msgid "The methods :meth:`Turtle.tracer`, :meth:`Turtle.window_width` and :meth:`Turtle.window_height` have been eliminated. Methods with these names and functionality are now available only as methods of :class:`Screen`. The functions derived from these remain available. (In fact already in Python 2.6 these methods were merely duplications of the corresponding :class:`TurtleScreen`/:class:`Screen`-methods.)"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2387
msgid "The method :meth:`Turtle.fill` has been eliminated. The behaviour of :meth:`begin_fill` and :meth:`end_fill` have changed slightly: now  every filling-process must be completed with an ``end_fill()`` call."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2392
msgid "A method :meth:`Turtle.filling` has been added. It returns a boolean value: ``True`` if a filling process is under way, ``False`` otherwise. This behaviour corresponds to a ``fill()`` call without arguments in Python 2.6."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2398
msgid "Changes since Python 3.0"
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2400
msgid "The methods :meth:`Turtle.shearfactor`, :meth:`Turtle.shapetransform` and :meth:`Turtle.get_shapepoly` have been added. Thus the full range of regular linear transforms is now available for transforming turtle shapes. :meth:`Turtle.tiltangle` has been enhanced in functionality: it now can be used to get or set the tiltangle. :meth:`Turtle.settiltangle` has been deprecated."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2407
msgid "The method :meth:`Screen.onkeypress` has been added as a complement to :meth:`Screen.onkey` which in fact binds actions to the keyrelease event. Accordingly the latter has got an alias: :meth:`Screen.onkeyrelease`."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2411
msgid "The method  :meth:`Screen.mainloop` has been added. So when working only with Screen and Turtle objects one must not additionally import :func:`mainloop` anymore."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2415
msgid "Two input methods has been added :meth:`Screen.textinput` and :meth:`Screen.numinput`. These popup input dialogs and return strings and numbers respectively."
msgstr ""

#: ../cpython/Doc/library/turtle.rst:2419
msgid "Two example scripts :file:`tdemo_nim.py` and :file:`tdemo_round_dance.py` have been added to the :file:`Lib/turtledemo` directory."
msgstr ""

