# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-01 14:56+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../cpython/Doc/library/http.cookies.rst:2
msgid ":mod:`http.cookies` --- HTTP state management"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:10
msgid "**Source code:** :source:`Lib/http/cookies.py`"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:14
msgid "The :mod:`http.cookies` module defines classes for abstracting the concept of cookies, an HTTP state management mechanism. It supports both simple string-only cookies, and provides an abstraction for having any serializable data-type as cookie value."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:19
msgid "The module formerly strictly applied the parsing rules described in the :rfc:`2109` and :rfc:`2068` specifications.  It has since been discovered that MSIE 3.0x doesn't follow the character rules outlined in those specs and also many current day browsers and servers have relaxed parsing rules when comes to Cookie handling.  As a result, the parsing rules used are a bit less strict."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:25
msgid "The character set, :data:`string.ascii_letters`, :data:`string.digits` and ``!#$%&'*+-.^_`|~:`` denote the set of valid characters allowed by this module in Cookie name (as :attr:`~Morsel.key`)."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:29
msgid "Allowed ':' as a valid Cookie name character."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:35
msgid "On encountering an invalid cookie, :exc:`CookieError` is raised, so if your cookie data comes from a browser you should always prepare for invalid data and catch :exc:`CookieError` on parsing."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:42
msgid "Exception failing because of :rfc:`2109` invalidity: incorrect attributes, incorrect :mailheader:`Set-Cookie` header, etc."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:48
msgid "This class is a dictionary-like object whose keys are strings and whose values are :class:`Morsel` instances. Note that upon setting a key to a value, the value is first converted to a :class:`Morsel` containing the key and the value."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:52
msgid "If *input* is given, it is passed to the :meth:`load` method."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:57
msgid "This class derives from :class:`BaseCookie` and overrides :meth:`value_decode` and :meth:`value_encode` to be the identity and :func:`str` respectively."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:65
msgid "Module :mod:`http.cookiejar`"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:64
msgid "HTTP cookie handling for web *clients*.  The :mod:`http.cookiejar` and :mod:`http.cookies` modules do not depend on each other."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:67
msgid ":rfc:`2109` - HTTP State Management Mechanism"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:68
msgid "This is the state management specification implemented by this module."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:74
msgid "Cookie Objects"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:79
msgid "Return a decoded value from a string representation. Return value can be any type. This method does nothing in :class:`BaseCookie` --- it exists so it can be overridden."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:86
msgid "Return an encoded value. *val* can be any type, but return value must be a string. This method does nothing in :class:`BaseCookie` --- it exists so it can be overridden."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:90
msgid "In general, it should be the case that :meth:`value_encode` and :meth:`value_decode` are inverses on the range of *value_decode*."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:96
msgid "Return a string representation suitable to be sent as HTTP headers. *attrs* and *header* are sent to each :class:`Morsel`'s :meth:`output` method. *sep* is used to join the headers together, and is by default the combination ``'\\r\\n'`` (CRLF)."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:104
msgid "Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP headers was sent."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:107
#: ../cpython/Doc/library/http.cookies.rst:203
#: ../cpython/Doc/library/http.cookies.rst:211
msgid "The meaning for *attrs* is the same as in :meth:`output`."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:112
msgid "If *rawdata* is a string, parse it as an ``HTTP_COOKIE`` and add the values found there as :class:`Morsel`\\ s. If it is a dictionary, it is equivalent to::"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:122
msgid "Morsel Objects"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:127
msgid "Abstract a key/value pair, which has some :rfc:`2109` attributes."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:129
msgid "Morsels are dictionary-like objects, whose set of keys is constant --- the valid :rfc:`2109` attributes, which are"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:132
msgid "``expires``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:133
msgid "``path``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:134
msgid "``comment``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:135
msgid "``domain``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:136
msgid "``max-age``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:137
msgid "``secure``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:138
msgid "``version``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:139
msgid "``httponly``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:140
msgid "``samesite``"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:142
msgid "The attribute :attr:`httponly` specifies that the cookie is only transferred in HTTP requests, and is not accessible through JavaScript. This is intended to mitigate some forms of cross-site scripting."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:146
msgid "The attribute :attr:`samesite` specifies that the browser is not allowed to send the cookie along with cross-site requests. This helps to mitigate CSRF attacks. Valid values for this attribute are \"Strict\" and \"Lax\"."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:150
msgid "The keys are case-insensitive and their default value is ``''``."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:152
msgid ":meth:`~Morsel.__eq__` now takes :attr:`~Morsel.key` and :attr:`~Morsel.value` into account."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:156
msgid "Attributes :attr:`~Morsel.key`, :attr:`~Morsel.value` and :attr:`~Morsel.coded_value` are read-only.  Use :meth:`~Morsel.set` for setting them."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:161
msgid "Added support for the :attr:`samesite` attribute."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:167
msgid "The value of the cookie."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:172
msgid "The encoded value of the cookie --- this is what should be sent."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:177
msgid "The name of the cookie."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:182
msgid "Set the *key*, *value* and *coded_value* attributes."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:187
msgid "Whether *K* is a member of the set of keys of a :class:`Morsel`."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:192
msgid "Return a string representation of the Morsel, suitable to be sent as an HTTP header. By default, all the attributes are included, unless *attrs* is given, in which case it should be a list of attributes to use. *header* is by default ``\"Set-Cookie:\"``."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:200
msgid "Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP header was sent."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:208
msgid "Return a string representing the Morsel, without any surrounding HTTP or JavaScript."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:216
msgid "Update the values in the Morsel dictionary with the values in the dictionary *values*.  Raise an error if any of the keys in the *values* dict is not a valid :rfc:`2109` attribute."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:220
msgid "an error is raised for invalid keys."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:226
msgid "Return a shallow copy of the Morsel object."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:228
msgid "return a Morsel object instead of a dict."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:234
msgid "Raise an error if key is not a valid :rfc:`2109` attribute, otherwise behave the same as :meth:`dict.setdefault`."
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:241
msgid "Example"
msgstr ""

#: ../cpython/Doc/library/http.cookies.rst:243
msgid "The following example demonstrates how to use the :mod:`http.cookies` module."
msgstr ""

