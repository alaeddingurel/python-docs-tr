# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-01 14:56+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../cpython/Doc/library/dis.rst:2
msgid ":mod:`dis` --- Disassembler for Python bytecode"
msgstr ""

#: ../cpython/Doc/library/dis.rst:7
msgid "**Source code:** :source:`Lib/dis.py`"
msgstr ""

#: ../cpython/Doc/library/dis.rst:11
msgid "The :mod:`dis` module supports the analysis of CPython :term:`bytecode` by disassembling it. The CPython bytecode which this module takes as an input is defined in the file :file:`Include/opcode.h` and used by the compiler and the interpreter."
msgstr ""

#: ../cpython/Doc/library/dis.rst:18
msgid "Bytecode is an implementation detail of the CPython interpreter.  No guarantees are made that bytecode will not be added, removed, or changed between versions of Python.  Use of this module should not be considered to work across Python VMs or Python releases."
msgstr ""

#: ../cpython/Doc/library/dis.rst:23
msgid "Use 2 bytes for each instruction. Previously the number of bytes varied by instruction."
msgstr ""

#: ../cpython/Doc/library/dis.rst:28
msgid "Example: Given the function :func:`myfunc`::"
msgstr ""

#: ../cpython/Doc/library/dis.rst:33
msgid "the following command can be used to display the disassembly of :func:`myfunc`::"
msgstr ""

#: ../cpython/Doc/library/dis.rst:42
msgid "(The \"2\" is a line number)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:45
msgid "Bytecode analysis"
msgstr ""

#: ../cpython/Doc/library/dis.rst:49
msgid "The bytecode analysis API allows pieces of Python code to be wrapped in a :class:`Bytecode` object that provides easy access to details of the compiled code."
msgstr ""

#: ../cpython/Doc/library/dis.rst:56
msgid "Analyse the bytecode corresponding to a function, generator, asynchronous generator, coroutine, method, string of source code, or a code object (as returned by :func:`compile`)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:60
msgid "This is a convenience wrapper around many of the functions listed below, most notably :func:`get_instructions`, as iterating over a :class:`Bytecode` instance yields the bytecode operations as :class:`Instruction` instances."
msgstr ""

#: ../cpython/Doc/library/dis.rst:64
#: ../cpython/Doc/library/dis.rst:225
msgid "If *first_line* is not ``None``, it indicates the line number that should be reported for the first source line in the disassembled code.  Otherwise, the source line information (if any) is taken directly from the disassembled code object."
msgstr ""

#: ../cpython/Doc/library/dis.rst:69
msgid "If *current_offset* is not ``None``, it refers to an instruction offset in the disassembled code. Setting this means :meth:`.dis` will display a \"current instruction\" marker against the specified opcode."
msgstr ""

#: ../cpython/Doc/library/dis.rst:75
msgid "Construct a :class:`Bytecode` instance from the given traceback, setting *current_offset* to the instruction responsible for the exception."
msgstr ""

#: ../cpython/Doc/library/dis.rst:80
msgid "The compiled code object."
msgstr ""

#: ../cpython/Doc/library/dis.rst:84
msgid "The first source line of the code object (if available)"
msgstr ""

#: ../cpython/Doc/library/dis.rst:88
msgid "Return a formatted view of the bytecode operations (the same as printed by :func:`dis.dis`, but returned as a multi-line string)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:93
msgid "Return a formatted multi-line string with detailed information about the code object, like :func:`code_info`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:96
#: ../cpython/Doc/library/dis.rst:130
#: ../cpython/Doc/library/dis.rst:176
msgid "This can now handle coroutine and asynchronous generator objects."
msgstr ""

#: ../cpython/Doc/library/dis.rst:99
msgid "Example::"
msgstr ""

#: ../cpython/Doc/library/dis.rst:112
msgid "Analysis functions"
msgstr ""

#: ../cpython/Doc/library/dis.rst:114
msgid "The :mod:`dis` module also defines the following analysis functions that convert the input directly to the desired output. They can be useful if only a single operation is being performed, so the intermediate analysis object isn't useful:"
msgstr ""

#: ../cpython/Doc/library/dis.rst:120
msgid "Return a formatted multi-line string with detailed code object information for the supplied function, generator, asynchronous generator, coroutine, method, source code string or code object."
msgstr ""

#: ../cpython/Doc/library/dis.rst:124
msgid "Note that the exact contents of code info strings are highly implementation dependent and they may change arbitrarily across Python VMs or Python releases."
msgstr ""

#: ../cpython/Doc/library/dis.rst:136
msgid "Print detailed code object information for the supplied function, method, source code string or code object to *file* (or ``sys.stdout`` if *file* is not specified)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:140
msgid "This is a convenient shorthand for ``print(code_info(x), file=file)``, intended for interactive exploration at the interpreter prompt."
msgstr ""

#: ../cpython/Doc/library/dis.rst:145
#: ../cpython/Doc/library/dis.rst:170
#: ../cpython/Doc/library/dis.rst:189
#: ../cpython/Doc/library/dis.rst:213
msgid "Added *file* parameter."
msgstr ""

#: ../cpython/Doc/library/dis.rst:151
msgid "Disassemble the *x* object.  *x* can denote either a module, a class, a method, a function, a generator, an asynchronous generator, a couroutine, a code object, a string of source code or a byte sequence of raw bytecode. For a module, it disassembles all functions. For a class, it disassembles all methods (including class and static methods). For a code object or sequence of raw bytecode, it prints one line per bytecode instruction. It also recursively disassembles nested code objects (the code of comprehensions, generator expressions and nested functions, and the code used for building nested classes). Strings are first compiled to code objects with the :func:`compile` built-in function before being disassembled.  If no object is provided, this function disassembles the last traceback."
msgstr ""

#: ../cpython/Doc/library/dis.rst:164
#: ../cpython/Doc/library/dis.rst:186
#: ../cpython/Doc/library/dis.rst:210
msgid "The disassembly is written as text to the supplied *file* argument if provided and to ``sys.stdout`` otherwise."
msgstr ""

#: ../cpython/Doc/library/dis.rst:167
msgid "The maximal depth of recursion is limited by *depth* unless it is ``None``. ``depth=0`` means no recursion."
msgstr ""

#: ../cpython/Doc/library/dis.rst:173
msgid "Implemented recursive disassembling and added *depth* parameter."
msgstr ""

#: ../cpython/Doc/library/dis.rst:182
msgid "Disassemble the top-of-stack function of a traceback, using the last traceback if none was passed.  The instruction causing the exception is indicated."
msgstr ""

#: ../cpython/Doc/library/dis.rst:196
msgid "Disassemble a code object, indicating the last instruction if *lasti* was provided.  The output is divided in the following columns:"
msgstr ""

#: ../cpython/Doc/library/dis.rst:199
msgid "the line number, for the first instruction of each line"
msgstr ""

#: ../cpython/Doc/library/dis.rst:200
msgid "the current instruction, indicated as ``-->``,"
msgstr ""

#: ../cpython/Doc/library/dis.rst:201
msgid "a labelled instruction, indicated with ``>>``,"
msgstr ""

#: ../cpython/Doc/library/dis.rst:202
msgid "the address of the instruction,"
msgstr ""

#: ../cpython/Doc/library/dis.rst:203
msgid "the operation code name,"
msgstr ""

#: ../cpython/Doc/library/dis.rst:204
msgid "operation parameters, and"
msgstr ""

#: ../cpython/Doc/library/dis.rst:205
msgid "interpretation of the parameters in parentheses."
msgstr ""

#: ../cpython/Doc/library/dis.rst:207
msgid "The parameter interpretation recognizes local and global variable names, constant values, branch targets, and compare operators."
msgstr ""

#: ../cpython/Doc/library/dis.rst:219
msgid "Return an iterator over the instructions in the supplied function, method, source code string or code object."
msgstr ""

#: ../cpython/Doc/library/dis.rst:222
msgid "The iterator generates a series of :class:`Instruction` named tuples giving the details of each operation in the supplied code."
msgstr ""

#: ../cpython/Doc/library/dis.rst:235
msgid "This generator function uses the ``co_firstlineno`` and ``co_lnotab`` attributes of the code object *code* to find the offsets which are starts of lines in the source code.  They are generated as ``(offset, lineno)`` pairs. See :source:`Objects/lnotab_notes.txt` for the ``co_lnotab`` format and how to decode it."
msgstr ""

#: ../cpython/Doc/library/dis.rst:241
msgid "Line numbers can be decreasing. Before, they were always increasing."
msgstr ""

#: ../cpython/Doc/library/dis.rst:247
msgid "Detect all offsets in the code object *code* which are jump targets, and return a list of these offsets."
msgstr ""

#: ../cpython/Doc/library/dis.rst:253
msgid "Compute the stack effect of *opcode* with argument *oparg*."
msgstr ""

#: ../cpython/Doc/library/dis.rst:260
msgid "Python Bytecode Instructions"
msgstr ""

#: ../cpython/Doc/library/dis.rst:262
msgid "The :func:`get_instructions` function and :class:`Bytecode` class provide details of bytecode instructions as :class:`Instruction` instances:"
msgstr ""

#: ../cpython/Doc/library/dis.rst:267
msgid "Details for a bytecode operation"
msgstr ""

#: ../cpython/Doc/library/dis.rst:271
msgid "numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the :ref:`opcode_collections`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:277
msgid "human readable name for operation"
msgstr ""

#: ../cpython/Doc/library/dis.rst:282
msgid "numeric argument to operation (if any), otherwise ``None``"
msgstr ""

#: ../cpython/Doc/library/dis.rst:287
msgid "resolved arg value (if known), otherwise same as arg"
msgstr ""

#: ../cpython/Doc/library/dis.rst:292
msgid "human readable description of operation argument"
msgstr ""

#: ../cpython/Doc/library/dis.rst:297
msgid "start index of operation within bytecode sequence"
msgstr ""

#: ../cpython/Doc/library/dis.rst:302
msgid "line started by this opcode (if any), otherwise ``None``"
msgstr ""

#: ../cpython/Doc/library/dis.rst:307
msgid "``True`` if other code jumps to here, otherwise ``False``"
msgstr ""

#: ../cpython/Doc/library/dis.rst:312
msgid "The Python compiler currently generates the following bytecode instructions."
msgstr ""

#: ../cpython/Doc/library/dis.rst:315
msgid "**General instructions**"
msgstr ""

#: ../cpython/Doc/library/dis.rst:319
msgid "Do nothing code.  Used as a placeholder by the bytecode optimizer."
msgstr ""

#: ../cpython/Doc/library/dis.rst:324
msgid "Removes the top-of-stack (TOS) item."
msgstr ""

#: ../cpython/Doc/library/dis.rst:329
msgid "Swaps the two top-most stack items."
msgstr ""

#: ../cpython/Doc/library/dis.rst:334
msgid "Lifts second and third stack item one position up, moves top down to position three."
msgstr ""

#: ../cpython/Doc/library/dis.rst:340
msgid "Lifts second, third and forth stack items one position up, moves top down to position four."
msgstr ""

#: ../cpython/Doc/library/dis.rst:348
msgid "Duplicates the reference on top of the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:355
msgid "Duplicates the two references on top of the stack, leaving them in the same order."
msgstr ""

#: ../cpython/Doc/library/dis.rst:361
msgid "**Unary operations**"
msgstr ""

#: ../cpython/Doc/library/dis.rst:363
msgid "Unary operations take the top of the stack, apply the operation, and push the result back on the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:368
msgid "Implements ``TOS = +TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:373
msgid "Implements ``TOS = -TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:378
msgid "Implements ``TOS = not TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:383
msgid "Implements ``TOS = ~TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:388
msgid "Implements ``TOS = iter(TOS)``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:393
msgid "If ``TOS`` is a :term:`generator iterator` or :term:`coroutine` object it is left as is.  Otherwise, implements ``TOS = iter(TOS)``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:399
msgid "**Binary operations**"
msgstr ""

#: ../cpython/Doc/library/dis.rst:401
msgid "Binary operations remove the top of the stack (TOS) and the second top-most stack item (TOS1) from the stack.  They perform the operation, and put the result back on the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:407
msgid "Implements ``TOS = TOS1 ** TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:412
msgid "Implements ``TOS = TOS1 * TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:417
msgid "Implements ``TOS = TOS1 @ TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:424
msgid "Implements ``TOS = TOS1 // TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:429
msgid "Implements ``TOS = TOS1 / TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:434
msgid "Implements ``TOS = TOS1 % TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:439
msgid "Implements ``TOS = TOS1 + TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:444
msgid "Implements ``TOS = TOS1 - TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:449
msgid "Implements ``TOS = TOS1[TOS]``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:454
msgid "Implements ``TOS = TOS1 << TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:459
msgid "Implements ``TOS = TOS1 >> TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:464
msgid "Implements ``TOS = TOS1 & TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:469
msgid "Implements ``TOS = TOS1 ^ TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:474
msgid "Implements ``TOS = TOS1 | TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:477
msgid "**In-place operations**"
msgstr ""

#: ../cpython/Doc/library/dis.rst:479
msgid "In-place operations are like binary operations, in that they remove TOS and TOS1, and push the result back on the stack, but the operation is done in-place when TOS1 supports it, and the resulting TOS may be (but does not have to be) the original TOS1."
msgstr ""

#: ../cpython/Doc/library/dis.rst:486
msgid "Implements in-place ``TOS = TOS1 ** TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:491
msgid "Implements in-place ``TOS = TOS1 * TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:496
msgid "Implements in-place ``TOS = TOS1 @ TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:503
msgid "Implements in-place ``TOS = TOS1 // TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:508
msgid "Implements in-place ``TOS = TOS1 / TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:513
msgid "Implements in-place ``TOS = TOS1 % TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:518
msgid "Implements in-place ``TOS = TOS1 + TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:523
msgid "Implements in-place ``TOS = TOS1 - TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:528
msgid "Implements in-place ``TOS = TOS1 << TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:533
msgid "Implements in-place ``TOS = TOS1 >> TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:538
msgid "Implements in-place ``TOS = TOS1 & TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:543
msgid "Implements in-place ``TOS = TOS1 ^ TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:548
msgid "Implements in-place ``TOS = TOS1 | TOS``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:553
msgid "Implements ``TOS1[TOS] = TOS2``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:558
msgid "Implements ``del TOS1[TOS]``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:561
msgid "**Coroutine opcodes**"
msgstr ""

#: ../cpython/Doc/library/dis.rst:565
msgid "Implements ``TOS = get_awaitable(TOS)``, where ``get_awaitable(o)`` returns ``o`` if ``o`` is a coroutine object or a generator object with the CO_ITERABLE_COROUTINE flag, or resolves ``o.__await__``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:575
msgid "Implements ``TOS = TOS.__aiter__()``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:578
msgid "Returning awaitable objects from ``__aiter__`` is no longer supported."
msgstr ""

#: ../cpython/Doc/library/dis.rst:585
msgid "Implements ``PUSH(get_awaitable(TOS.__anext__()))``.  See ``GET_AWAITABLE`` for details about ``get_awaitable``"
msgstr ""

#: ../cpython/Doc/library/dis.rst:593
msgid "Terminates an :keyword:`async for` loop.  Handles an exception raised when awaiting a next item.  If TOS is :exc:`StopAsyncIteration` pop 7 values from the stack and restore the exception state using the second three of them.  Otherwise re-raise the exception using the three values from the stack.  An exception handler block is removed from the block stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:604
msgid "Resolves ``__aenter__`` and ``__aexit__`` from the object on top of the stack.  Pushes ``__aexit__`` and result of ``__aenter__()`` to the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:612
msgid "Creates a new frame object."
msgstr ""

#: ../cpython/Doc/library/dis.rst:618
msgid "**Miscellaneous opcodes**"
msgstr ""

#: ../cpython/Doc/library/dis.rst:622
msgid "Implements the expression statement for the interactive mode.  TOS is removed from the stack and printed.  In non-interactive mode, an expression statement is terminated with :opcode:`POP_TOP`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:629
msgid "Calls ``set.add(TOS1[-i], TOS)``.  Used to implement set comprehensions."
msgstr ""

#: ../cpython/Doc/library/dis.rst:634
msgid "Calls ``list.append(TOS[-i], TOS)``.  Used to implement list comprehensions."
msgstr ""

#: ../cpython/Doc/library/dis.rst:639
msgid "Calls ``dict.setitem(TOS1[-i], TOS, TOS1)``.  Used to implement dict comprehensions."
msgstr ""

#: ../cpython/Doc/library/dis.rst:644
msgid "For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and :opcode:`MAP_ADD` instructions, while the added value or key/value pair is popped off, the container object remains on the stack so that it is available for further iterations of the loop."
msgstr ""

#: ../cpython/Doc/library/dis.rst:652
msgid "Returns with TOS to the caller of the function."
msgstr ""

#: ../cpython/Doc/library/dis.rst:657
msgid "Pops TOS and yields it from a :term:`generator`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:662
msgid "Pops TOS and delegates to it as a subiterator from a :term:`generator`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:669
msgid "Checks whether ``__annotations__`` is defined in ``locals()``, if not it is set up to an empty ``dict``. This opcode is only emitted if a class or module body contains :term:`variable annotations <variable annotation>` statically."
msgstr ""

#: ../cpython/Doc/library/dis.rst:679
msgid "Loads all symbols not starting with ``'_'`` directly from the module TOS to the local namespace. The module is popped after loading all names. This opcode implements ``from module import *``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:686
msgid "Removes one block from the block stack.  Per frame, there is a stack of blocks, denoting :keyword:`try` statements, and such."
msgstr ""

#: ../cpython/Doc/library/dis.rst:692
msgid "Removes one block from the block stack. The popped block must be an exception handler block, as implicitly created when entering an except handler.  In addition to popping extraneous values from the frame stack, the last three popped values are used to restore the exception state."
msgstr ""

#: ../cpython/Doc/library/dis.rst:700
msgid "Cleans up the value stack and the block stack.  If *preserve_tos* is not ``0`` TOS first is popped from the stack and pushed on the stack after perfoming other stack operations:"
msgstr ""

#: ../cpython/Doc/library/dis.rst:704
msgid "If TOS is ``NULL`` or an integer (pushed by :opcode:`BEGIN_FINALLY` or :opcode:`CALL_FINALLY`) it is popped from the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:706
msgid "If TOS is an exception type (pushed when an exception has been raised) 6 values are popped from the stack, the last three popped values are used to restore the exception state.  An exception handler block is removed from the block stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:711
msgid "It is similar to :opcode:`END_FINALLY`, but doesn't change the bytecode counter nor raise an exception.  Used for implementing :keyword:`break`, :keyword:`continue` and :keyword:`return` in the :keyword:`finally` block."
msgstr ""

#: ../cpython/Doc/library/dis.rst:720
msgid "Pushes ``NULL`` onto the stack for using it in :opcode:`END_FINALLY`, :opcode:`POP_FINALLY`, :opcode:`WITH_CLEANUP_START` and :opcode:`WITH_CLEANUP_FINISH`.  Starts the :keyword:`finally` block."
msgstr ""

#: ../cpython/Doc/library/dis.rst:729
msgid "Terminates a :keyword:`finally` clause.  The interpreter recalls whether the exception has to be re-raised or execution has to be continued depending on the value of TOS."
msgstr ""

#: ../cpython/Doc/library/dis.rst:733
msgid "If TOS is ``NULL`` (pushed by :opcode:`BEGIN_FINALLY`) continue from the next instruction. TOS is popped."
msgstr ""

#: ../cpython/Doc/library/dis.rst:735
msgid "If TOS is an integer (pushed by :opcode:`CALL_FINALLY`), sets the bytecode counter to TOS.  TOS is popped."
msgstr ""

#: ../cpython/Doc/library/dis.rst:737
msgid "If TOS is an exception type (pushed when an exception has been raised) 6 values are popped from the stack, the first three popped values are used to re-raise the exception and the last three popped values are used to restore the exception state.  An exception handler block is removed from the block stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:746
msgid "Pushes :func:`builtins.__build_class__` onto the stack.  It is later called by :opcode:`CALL_FUNCTION` to construct a class."
msgstr ""

#: ../cpython/Doc/library/dis.rst:752
msgid "This opcode performs several operations before a with block starts.  First, it loads :meth:`~object.__exit__` from the context manager and pushes it onto the stack for later use by :opcode:`WITH_CLEANUP_START`.  Then, :meth:`~object.__enter__` is called, and a finally block pointing to *delta* is pushed.  Finally, the result of calling the ``__enter__()`` method is pushed onto the stack.  The next opcode will either ignore it (:opcode:`POP_TOP`), or store it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, or :opcode:`UNPACK_SEQUENCE`)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:766
msgid "Starts cleaning up the stack when a :keyword:`with` statement block exits."
msgstr ""

#: ../cpython/Doc/library/dis.rst:768
msgid "At the top of the stack are either ``NULL`` (pushed by :opcode:`BEGIN_FINALLY`) or 6 values pushed if an exception has been raised in the with block.  Below is the context manager's :meth:`~object.__exit__` or :meth:`~object.__aexit__` bound method."
msgstr ""

#: ../cpython/Doc/library/dis.rst:773
msgid "If TOS is ``NULL``, calls ``SECOND(None, None, None)``, removes the function from the stack, leaving TOS, and pushes ``None`` to the stack.  Otherwise calls ``SEVENTH(TOP, SECOND, THIRD)``, shifts the bottom 3 values of the stack down, replaces the empty spot with ``NULL`` and pushes TOS.  Finally pushes the result of the call."
msgstr ""

#: ../cpython/Doc/library/dis.rst:782
msgid "Finishes cleaning up the stack when a :keyword:`with` statement block exits."
msgstr ""

#: ../cpython/Doc/library/dis.rst:784
msgid "TOS is result of ``__exit__()`` or ``__aexit__()`` function call pushed by :opcode:`WITH_CLEANUP_START`.  SECOND is ``None`` or an exception type (pushed when an exception has been raised)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:788
msgid "Pops two values from the stack.  If SECOND is not None and TOS is true unwinds the EXCEPT_HANDLER block which was created when the exception was caught and pushes ``NULL`` to the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:793
msgid "All of the following opcodes use their arguments."
msgstr ""

#: ../cpython/Doc/library/dis.rst:797
msgid "Implements ``name = TOS``. *namei* is the index of *name* in the attribute :attr:`co_names` of the code object. The compiler tries to use :opcode:`STORE_FAST` or :opcode:`STORE_GLOBAL` if possible."
msgstr ""

#: ../cpython/Doc/library/dis.rst:804
msgid "Implements ``del name``, where *namei* is the index into :attr:`co_names` attribute of the code object."
msgstr ""

#: ../cpython/Doc/library/dis.rst:810
msgid "Unpacks TOS into *count* individual values, which are put onto the stack right-to-left."
msgstr ""

#: ../cpython/Doc/library/dis.rst:816
msgid "Implements assignment with a starred target: Unpacks an iterable in TOS into individual values, where the total number of values can be smaller than the number of items in the iterable: one of the new values will be a list of all leftover items."
msgstr ""

#: ../cpython/Doc/library/dis.rst:821
msgid "The low byte of *counts* is the number of values before the list value, the high byte of *counts* the number of values after it.  The resulting values are put onto the stack right-to-left."
msgstr ""

#: ../cpython/Doc/library/dis.rst:828
msgid "Implements ``TOS.name = TOS1``, where *namei* is the index of name in :attr:`co_names`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:834
msgid "Implements ``del TOS.name``, using *namei* as index into :attr:`co_names`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:839
msgid "Works as :opcode:`STORE_NAME`, but stores the name as a global."
msgstr ""

#: ../cpython/Doc/library/dis.rst:844
msgid "Works as :opcode:`DELETE_NAME`, but deletes a global name."
msgstr ""

#: ../cpython/Doc/library/dis.rst:849
msgid "Pushes ``co_consts[consti]`` onto the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:854
msgid "Pushes the value associated with ``co_names[namei]`` onto the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:859
msgid "Creates a tuple consuming *count* items from the stack, and pushes the resulting tuple onto the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:865
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a list."
msgstr ""

#: ../cpython/Doc/library/dis.rst:870
msgid "Works as :opcode:`BUILD_TUPLE`, but creates a set."
msgstr ""

#: ../cpython/Doc/library/dis.rst:875
msgid "Pushes a new dictionary object onto the stack.  Pops ``2 * count`` items so that the dictionary holds *count* entries: ``{..., TOS3: TOS2, TOS1: TOS}``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:879
msgid "The dictionary is created from stack items instead of creating an empty dictionary pre-sized to hold *count* items."
msgstr ""

#: ../cpython/Doc/library/dis.rst:886
msgid "The version of :opcode:`BUILD_MAP` specialized for constant keys.  *count* values are consumed from the stack.  The top element on the stack contains a tuple of keys."
msgstr ""

#: ../cpython/Doc/library/dis.rst:895
msgid "Concatenates *count* strings from the stack and pushes the resulting string onto the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:903
msgid "Pops *count* iterables from the stack, joins them in a single tuple, and pushes the result.  Implements iterable unpacking in tuple displays ``(*x, *y, *z)``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:912
msgid "This is similar to :opcode:`BUILD_TUPLE_UNPACK`, but is used for ``f(*x, *y, *z)`` call syntax. The stack item at position ``count + 1`` should be the corresponding callable ``f``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:921
msgid "This is similar to :opcode:`BUILD_TUPLE_UNPACK`, but pushes a list instead of tuple.  Implements iterable unpacking in list displays ``[*x, *y, *z]``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:930
msgid "This is similar to :opcode:`BUILD_TUPLE_UNPACK`, but pushes a set instead of tuple.  Implements iterable unpacking in set displays ``{*x, *y, *z}``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:939
msgid "Pops *count* mappings from the stack, merges them into a single dictionary, and pushes the result.  Implements dictionary unpacking in dictionary displays ``{**x, **y, **z}``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:948
msgid "This is similar to :opcode:`BUILD_MAP_UNPACK`, but is used for ``f(**x, **y, **z)`` call syntax.  The stack item at position ``count + 2`` should be the corresponding callable ``f``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:953
msgid "The position of the callable is determined by adding 2 to the opcode argument instead of encoding it in the second byte of the argument."
msgstr ""

#: ../cpython/Doc/library/dis.rst:960
msgid "Replaces TOS with ``getattr(TOS, co_names[namei])``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:965
msgid "Performs a Boolean operation.  The operation name can be found in ``cmp_op[opname]``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:971
msgid "Imports the module ``co_names[namei]``.  TOS and TOS1 are popped and provide the *fromlist* and *level* arguments of :func:`__import__`.  The module object is pushed onto the stack.  The current namespace is not affected: for a proper import statement, a subsequent :opcode:`STORE_FAST` instruction modifies the namespace."
msgstr ""

#: ../cpython/Doc/library/dis.rst:980
msgid "Loads the attribute ``co_names[namei]`` from the module found in TOS. The resulting object is pushed onto the stack, to be subsequently stored by a :opcode:`STORE_FAST` instruction."
msgstr ""

#: ../cpython/Doc/library/dis.rst:987
msgid "Increments bytecode counter by *delta*."
msgstr ""

#: ../cpython/Doc/library/dis.rst:992
msgid "If TOS is true, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

#: ../cpython/Doc/library/dis.rst:999
msgid "If TOS is false, sets the bytecode counter to *target*.  TOS is popped."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1006
msgid "If TOS is true, sets the bytecode counter to *target* and leaves TOS on the stack.  Otherwise (TOS is false), TOS is popped."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1014
msgid "If TOS is false, sets the bytecode counter to *target* and leaves TOS on the stack.  Otherwise (TOS is true), TOS is popped."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1022
msgid "Set bytecode counter to *target*."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1027
msgid "TOS is an :term:`iterator`.  Call its :meth:`~iterator.__next__` method.  If this yields a new value, push it on the stack (leaving the iterator below it).  If the iterator indicates it is exhausted TOS is popped, and the byte code counter is incremented by *delta*."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1035
msgid "Loads the global named ``co_names[namei]`` onto the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1040
msgid "Pushes a try block from a try-finally or try-except clause onto the block stack.  *delta* points to the finally block or the first except block."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1046
msgid "Pushes the address of the next instruction onto the stack and increments bytecode counter by *delta*.  Used for calling the finally block as a \"subroutine\"."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1055
msgid "Pushes a reference to the local ``co_varnames[var_num]`` onto the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1060
msgid "Stores TOS into the local ``co_varnames[var_num]``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1065
msgid "Deletes local ``co_varnames[var_num]``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1070
msgid "Pushes a reference to the cell contained in slot *i* of the cell and free variable storage.  The name of the variable is ``co_cellvars[i]`` if *i* is less than the length of *co_cellvars*.  Otherwise it is ``co_freevars[i - len(co_cellvars)]``."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1078
msgid "Loads the cell contained in slot *i* of the cell and free variable storage. Pushes a reference to the object the cell contains on the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1084
msgid "Much like :opcode:`LOAD_DEREF` but first checks the locals dictionary before consulting the cell.  This is used for loading free variables in class bodies."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1093
msgid "Stores TOS into the cell contained in slot *i* of the cell and free variable storage."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1099
msgid "Empties the cell contained in slot *i* of the cell and free variable storage. Used by the :keyword:`del` statement."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1107
msgid "Raises an exception. *argc* indicates the number of parameters to the raise statement, ranging from 0 to 3.  The handler will find the traceback as TOS2, the parameter as TOS1, and the exception as TOS."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1114
msgid "Calls a function.  *argc* indicates the number of positional arguments. The positional arguments are on the stack, with the right-most argument on top.  Below the arguments, the function object to call is on the stack. Pops all function arguments, and the function itself off the stack, and pushes the return value."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1120
msgid "This opcode is used only for calls with positional arguments."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1126
msgid "Calls a function.  *argc* indicates the number of arguments (positional and keyword).  The top element on the stack contains a tuple of keyword argument names.  Below the tuple, keyword arguments are on the stack, in the order corresponding to the tuple.  Below the keyword arguments, the positional arguments are on the stack, with the right-most parameter on top.  Below the arguments, the function object to call is on the stack. Pops all function arguments, and the function itself off the stack, and pushes the return value."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1135
msgid "Keyword arguments are packed in a tuple instead of a dictionary, *argc* indicates the total number of arguments"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1142
msgid "Calls a function. The lowest bit of *flags* indicates whether the var-keyword argument is placed at the top of the stack.  Below the var-keyword argument, the var-positional argument is on the stack. Below the arguments, the function object to call is placed. Pops all function arguments, and the function itself off the stack, and pushes the return value. Note that this opcode pops at most three items from the stack. Var-positional and var-keyword arguments are packed by :opcode:`BUILD_TUPLE_UNPACK_WITH_CALL` and :opcode:`BUILD_MAP_UNPACK_WITH_CALL`."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1157
msgid "Loads a method named ``co_names[namei]`` from TOS object. TOS is popped and method and TOS are pushed when interpreter can call unbound method directly. TOS will be used as the first argument (``self``) by :opcode:`CALL_METHOD`. Otherwise, ``NULL`` and  method is pushed (method is bound method or something else)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1168
msgid "Calls a method.  *argc* is number of positional arguments. Keyword arguments are not supported.  This opcode is designed to be used with :opcode:`LOAD_METHOD`.  Positional arguments are on top of the stack. Below them, two items described in :opcode:`LOAD_METHOD` on the stack. All of them are popped and return value is pushed."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1179
msgid "Pushes a new function object on the stack.  From bottom to top, the consumed stack must consist of values if the argument carries a specified flag value"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1182
msgid "``0x01`` a tuple of default argument objects in positional order"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1183
msgid "``0x02`` a dictionary of keyword-only parameters' default values"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1184
msgid "``0x04`` an annotation dictionary"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1185
msgid "``0x08`` a tuple containing cells for free variables, making a closure"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1186
msgid "the code associated with the function (at TOS1)"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1187
msgid "the :term:`qualified name` of the function (at TOS)"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1194
msgid "Pushes a slice object on the stack.  *argc* must be 2 or 3.  If it is 2, ``slice(TOS1, TOS)`` is pushed; if it is 3, ``slice(TOS2, TOS1, TOS)`` is pushed. See the :func:`slice` built-in function for more information."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1201
msgid "Prefixes any opcode which has an argument too big to fit into the default two bytes.  *ext* holds two additional bytes which, taken together with the subsequent opcode's argument, comprise a four-byte argument, *ext* being the two most-significant bytes."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1209
msgid "Used for implementing formatted literal strings (f-strings).  Pops an optional *fmt_spec* from the stack, then a required *value*. *flags* is interpreted as follows:"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1213
msgid "``(flags & 0x03) == 0x00``: *value* is formatted as-is."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1214
msgid "``(flags & 0x03) == 0x01``: call :func:`str` on *value* before formatting it."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1216
msgid "``(flags & 0x03) == 0x02``: call :func:`repr` on *value* before formatting it."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1218
msgid "``(flags & 0x03) == 0x03``: call :func:`ascii` on *value* before formatting it."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1220
msgid "``(flags & 0x04) == 0x04``: pop *fmt_spec* from the stack and use it, else use an empty *fmt_spec*."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1223
msgid "Formatting is performed using :c:func:`PyObject_Format`.  The result is pushed on the stack."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1231
msgid "This is not really an opcode.  It identifies the dividing line between opcodes which don't use their argument and those that do (``< HAVE_ARGUMENT`` and ``>= HAVE_ARGUMENT``, respectively)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1235
msgid "Now every instruction has an argument, but opcodes ``< HAVE_ARGUMENT`` ignore it. Before, only opcodes ``>= HAVE_ARGUMENT`` had an argument."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1243
msgid "Opcode collections"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1245
msgid "These collections are provided for automatic introspection of bytecode instructions:"
msgstr ""

#: ../cpython/Doc/library/dis.rst:1250
msgid "Sequence of operation names, indexable using the bytecode."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1255
msgid "Dictionary mapping operation names to bytecodes."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1260
msgid "Sequence of all compare operation names."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1265
msgid "Sequence of bytecodes that have a constant parameter."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1270
msgid "Sequence of bytecodes that access a free variable (note that 'free' in this context refers to names in the current scope that are referenced by inner scopes or names in outer scopes that are referenced from this scope.  It does *not* include references to global or builtin scopes)."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1278
msgid "Sequence of bytecodes that access an attribute by name."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1283
msgid "Sequence of bytecodes that have a relative jump target."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1288
msgid "Sequence of bytecodes that have an absolute jump target."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1293
msgid "Sequence of bytecodes that access a local variable."
msgstr ""

#: ../cpython/Doc/library/dis.rst:1298
msgid "Sequence of bytecodes of Boolean operations."
msgstr ""

