# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-01 14:56+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../cpython/Doc/c-api/typeobj.rst:6
msgid "Type Objects"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:8
msgid "Perhaps one of the most important structures of the Python object system is the structure that defines a new type: the :c:type:`PyTypeObject` structure.  Type objects can be handled using any of the :c:func:`PyObject_\\*` or :c:func:`PyType_\\*` functions, but do not offer much that's interesting to most Python applications. These objects are fundamental to how objects behave, so they are very important to the interpreter itself and to any extension module that implements new types."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:16
msgid "Type objects are fairly large compared to most of the standard types. The reason for the size is that each type object stores a large number of values, mostly C function pointers, each of which implements a small part of the type's functionality.  The fields of the type object are examined in detail in this section.  The fields will be described in the order in which they occur in the structure."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:23
msgid "In addition to the following quick reference, the :ref:`examples` section provides at-a-glance insight into the meaning and use of :c:type:`PyTypeObject`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:29
msgid "Quick Reference"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:34
msgid "\"tp slots\""
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:40
msgid "PyTypeObject Slot [#slots]_"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:40
#: ../cpython/Doc/c-api/typeobj.rst:200
msgid ":ref:`Type <slot-typedefs-table>`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:40
msgid "special methods/attrs"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:40
msgid "Info [#cols]_"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:42
msgid "O"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:42
msgid "T"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:42
msgid "D"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:42
msgid "I"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:44
msgid "<R> :c:member:`~PyTypeObject.tp_name`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:44
#: ../cpython/Doc/c-api/typeobj.rst:86
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
msgid "const char *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:44
msgid "__name__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:44
#: ../cpython/Doc/c-api/typeobj.rst:44
#: ../cpython/Doc/c-api/typeobj.rst:46
#: ../cpython/Doc/c-api/typeobj.rst:46
#: ../cpython/Doc/c-api/typeobj.rst:46
#: ../cpython/Doc/c-api/typeobj.rst:48
#: ../cpython/Doc/c-api/typeobj.rst:48
#: ../cpython/Doc/c-api/typeobj.rst:50
#: ../cpython/Doc/c-api/typeobj.rst:50
#: ../cpython/Doc/c-api/typeobj.rst:50
#: ../cpython/Doc/c-api/typeobj.rst:62
#: ../cpython/Doc/c-api/typeobj.rst:62
#: ../cpython/Doc/c-api/typeobj.rst:62
#: ../cpython/Doc/c-api/typeobj.rst:70
#: ../cpython/Doc/c-api/typeobj.rst:72
#: ../cpython/Doc/c-api/typeobj.rst:72
#: ../cpython/Doc/c-api/typeobj.rst:74
#: ../cpython/Doc/c-api/typeobj.rst:74
#: ../cpython/Doc/c-api/typeobj.rst:76
#: ../cpython/Doc/c-api/typeobj.rst:76
#: ../cpython/Doc/c-api/typeobj.rst:79
#: ../cpython/Doc/c-api/typeobj.rst:79
#: ../cpython/Doc/c-api/typeobj.rst:84
#: ../cpython/Doc/c-api/typeobj.rst:84
#: ../cpython/Doc/c-api/typeobj.rst:86
#: ../cpython/Doc/c-api/typeobj.rst:86
#: ../cpython/Doc/c-api/typeobj.rst:88
#: ../cpython/Doc/c-api/typeobj.rst:90
#: ../cpython/Doc/c-api/typeobj.rst:92
#: ../cpython/Doc/c-api/typeobj.rst:99
#: ../cpython/Doc/c-api/typeobj.rst:101
#: ../cpython/Doc/c-api/typeobj.rst:103
#: ../cpython/Doc/c-api/typeobj.rst:105
#: ../cpython/Doc/c-api/typeobj.rst:105
#: ../cpython/Doc/c-api/typeobj.rst:107
#: ../cpython/Doc/c-api/typeobj.rst:109
#: ../cpython/Doc/c-api/typeobj.rst:109
#: ../cpython/Doc/c-api/typeobj.rst:111
#: ../cpython/Doc/c-api/typeobj.rst:115
#: ../cpython/Doc/c-api/typeobj.rst:117
#: ../cpython/Doc/c-api/typeobj.rst:120
#: ../cpython/Doc/c-api/typeobj.rst:122
#: ../cpython/Doc/c-api/typeobj.rst:122
#: ../cpython/Doc/c-api/typeobj.rst:122
#: ../cpython/Doc/c-api/typeobj.rst:124
#: ../cpython/Doc/c-api/typeobj.rst:126
#: ../cpython/Doc/c-api/typeobj.rst:126
#: ../cpython/Doc/c-api/typeobj.rst:128
#: ../cpython/Doc/c-api/typeobj.rst:128
#: ../cpython/Doc/c-api/typeobj.rst:130
#: ../cpython/Doc/c-api/typeobj.rst:130
#: ../cpython/Doc/c-api/typeobj.rst:146
msgid "X"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:46
msgid ":c:member:`~PyTypeObject.tp_basicsize`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:46
#: ../cpython/Doc/c-api/typeobj.rst:48
#: ../cpython/Doc/c-api/typeobj.rst:99
#: ../cpython/Doc/c-api/typeobj.rst:120
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:419
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
msgid "Py_ssize_t"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:48
msgid ":c:member:`~PyTypeObject.tp_itemsize`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:50
msgid ":c:member:`~PyTypeObject.tp_dealloc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:50
#: ../cpython/Doc/c-api/typeobj.rst:142
#: ../cpython/Doc/c-api/typeobj.rst:146
#: ../cpython/Doc/c-api/typeobj.rst:343
msgid ":c:type:`destructor`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:52
msgid "(:c:member:`~PyTypeObject.tp_print`)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:54
msgid "(:c:member:`~PyTypeObject.tp_getattr`)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:54
#: ../cpython/Doc/c-api/typeobj.rst:373
msgid ":c:type:`getattrfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:54
#: ../cpython/Doc/c-api/typeobj.rst:76
msgid "__getattribute__, __getattr__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:54
#: ../cpython/Doc/c-api/typeobj.rst:57
#: ../cpython/Doc/c-api/typeobj.rst:70
#: ../cpython/Doc/c-api/typeobj.rst:76
#: ../cpython/Doc/c-api/typeobj.rst:79
#: ../cpython/Doc/c-api/typeobj.rst:88
#: ../cpython/Doc/c-api/typeobj.rst:90
#: ../cpython/Doc/c-api/typeobj.rst:92
msgid "G"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:57
msgid "(:c:member:`~PyTypeObject.tp_setattr`)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:57
#: ../cpython/Doc/c-api/typeobj.rst:378
msgid ":c:type:`setattrfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:57
#: ../cpython/Doc/c-api/typeobj.rst:79
msgid "__setattr__, __delattr__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:60
msgid ":c:member:`~PyTypeObject.tp_as_async`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:60
msgid ":c:type:`PyAsyncMethods` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:60
#: ../cpython/Doc/c-api/typeobj.rst:64
#: ../cpython/Doc/c-api/typeobj.rst:66
#: ../cpython/Doc/c-api/typeobj.rst:68
msgid ":ref:`sub-slots`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:60
#: ../cpython/Doc/c-api/typeobj.rst:64
#: ../cpython/Doc/c-api/typeobj.rst:66
#: ../cpython/Doc/c-api/typeobj.rst:68
#: ../cpython/Doc/c-api/typeobj.rst:82
msgid "%"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:62
msgid ":c:member:`~PyTypeObject.tp_repr`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:62
#: ../cpython/Doc/c-api/typeobj.rst:74
#: ../cpython/Doc/c-api/typeobj.rst:365
msgid ":c:type:`reprfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:62
msgid "__repr__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:64
msgid ":c:member:`~PyTypeObject.tp_as_number`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:64
msgid ":c:type:`PyNumberMethods` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:66
msgid ":c:member:`~PyTypeObject.tp_as_sequence`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:66
msgid ":c:type:`PySequenceMethods` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:68
msgid ":c:member:`~PyTypeObject.tp_as_mapping`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:68
msgid ":c:type:`PyMappingMethods` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:70
msgid ":c:member:`~PyTypeObject.tp_hash`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:70
#: ../cpython/Doc/c-api/typeobj.rst:407
msgid ":c:type:`hashfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:70
msgid "__hash__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:72
msgid ":c:member:`~PyTypeObject.tp_call`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:72
#: ../cpython/Doc/c-api/typeobj.rst:234
#: ../cpython/Doc/c-api/typeobj.rst:237
#: ../cpython/Doc/c-api/typeobj.rst:443
msgid ":c:type:`ternaryfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:72
msgid "__call__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:74
msgid ":c:member:`~PyTypeObject.tp_str`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:74
msgid "__str__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:76
msgid ":c:member:`~PyTypeObject.tp_getattro`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:76
#: ../cpython/Doc/c-api/typeobj.rst:384
msgid ":c:type:`getattrofunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:79
msgid ":c:member:`~PyTypeObject.tp_setattro`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:79
#: ../cpython/Doc/c-api/typeobj.rst:389
msgid ":c:type:`setattrofunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:82
msgid ":c:member:`~PyTypeObject.tp_as_buffer`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:82
msgid ":c:type:`PyBufferProcs` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:84
msgid ":c:member:`~PyTypeObject.tp_flags`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:84
msgid "unsigned long"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:84
#: ../cpython/Doc/c-api/typeobj.rst:99
#: ../cpython/Doc/c-api/typeobj.rst:113
#: ../cpython/Doc/c-api/typeobj.rst:120
#: ../cpython/Doc/c-api/typeobj.rst:124
#: ../cpython/Doc/c-api/typeobj.rst:124
#: ../cpython/Doc/c-api/typeobj.rst:126
#: ../cpython/Doc/c-api/typeobj.rst:126
#: ../cpython/Doc/c-api/typeobj.rst:128
#: ../cpython/Doc/c-api/typeobj.rst:128
msgid "?"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:86
msgid ":c:member:`~PyTypeObject.tp_doc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:86
msgid "__doc__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:88
msgid ":c:member:`~PyTypeObject.tp_traverse`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:88
#: ../cpython/Doc/c-api/typeobj.rst:347
msgid ":c:type:`traverseproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:90
msgid ":c:member:`~PyTypeObject.tp_clear`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:90
#: ../cpython/Doc/c-api/typeobj.rst:130
#: ../cpython/Doc/c-api/typeobj.rst:245
#: ../cpython/Doc/c-api/typeobj.rst:432
msgid ":c:type:`inquiry`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:92
msgid ":c:member:`~PyTypeObject.tp_richcompare`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:92
#: ../cpython/Doc/c-api/typeobj.rst:409
msgid ":c:type:`richcmpfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:92
msgid "__lt__, __le__, __eq__, __ne__, __gt__, __ge__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:99
msgid ":c:member:`~PyTypeObject.tp_weaklistoffset`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:101
msgid ":c:member:`~PyTypeObject.tp_iter`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:101
#: ../cpython/Doc/c-api/typeobj.rst:415
msgid ":c:type:`getiterfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:101
msgid "__iter__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:103
msgid ":c:member:`~PyTypeObject.tp_iternext`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:103
#: ../cpython/Doc/c-api/typeobj.rst:417
msgid ":c:type:`iternextfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:103
msgid "__next__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:105
msgid ":c:member:`~PyTypeObject.tp_methods`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:105
msgid ":c:type:`PyMethodDef` []"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:107
msgid ":c:member:`~PyTypeObject.tp_members`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:107
msgid ":c:type:`PyMemberDef` []"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:109
msgid ":c:member:`~PyTypeObject.tp_getset`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:109
msgid ":c:type:`PyGetSetDef` []"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:111
msgid ":c:member:`~PyTypeObject.tp_base`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:111
#: ../cpython/Doc/c-api/typeobj.rst:0
msgid ":c:type:`PyTypeObject` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:111
msgid "__base__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:113
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:113
#: ../cpython/Doc/c-api/typeobj.rst:132
#: ../cpython/Doc/c-api/typeobj.rst:134
#: ../cpython/Doc/c-api/typeobj.rst:136
#: ../cpython/Doc/c-api/typeobj.rst:138
#: ../cpython/Doc/c-api/typeobj.rst:140
#: ../cpython/Doc/c-api/typeobj.rst:338
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:353
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:365
#: ../cpython/Doc/c-api/typeobj.rst:365
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:373
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:384
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:395
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:407
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:409
#: ../cpython/Doc/c-api/typeobj.rst:415
#: ../cpython/Doc/c-api/typeobj.rst:415
#: ../cpython/Doc/c-api/typeobj.rst:417
#: ../cpython/Doc/c-api/typeobj.rst:417
#: ../cpython/Doc/c-api/typeobj.rst:419
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:434
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:438
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:443
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:449
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
msgid ":c:type:`PyObject` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:113
msgid "__dict__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:115
msgid ":c:member:`~PyTypeObject.tp_descr_get`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:115
#: ../cpython/Doc/c-api/typeobj.rst:395
msgid ":c:type:`descrgetfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:115
msgid "__get__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:117
msgid ":c:member:`~PyTypeObject.tp_descr_set`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:117
#: ../cpython/Doc/c-api/typeobj.rst:401
msgid ":c:type:`descrsetfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:117
msgid "__set__, __delete__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:120
msgid ":c:member:`~PyTypeObject.tp_dictoffset`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:122
msgid ":c:member:`~PyTypeObject.tp_init`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:122
#: ../cpython/Doc/c-api/typeobj.rst:359
msgid ":c:type:`initproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:122
msgid "__init__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:124
msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:124
#: ../cpython/Doc/c-api/typeobj.rst:338
msgid ":c:type:`allocfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:126
msgid ":c:member:`~PyTypeObject.tp_new`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:126
#: ../cpython/Doc/c-api/typeobj.rst:353
msgid ":c:type:`newfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:126
msgid "__new__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:128
msgid ":c:member:`~PyTypeObject.tp_free`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:128
#: ../cpython/Doc/c-api/typeobj.rst:345
msgid ":c:type:`freefunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:130
msgid ":c:member:`~PyTypeObject.tp_is_gc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:132
msgid "<:c:member:`~PyTypeObject.tp_bases`>"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:132
msgid "__bases__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:132
#: ../cpython/Doc/c-api/typeobj.rst:134
msgid "~"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:134
msgid "<:c:member:`~PyTypeObject.tp_mro`>"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:134
msgid "__mro__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:136
msgid "[:c:member:`~PyTypeObject.tp_cache`]"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:138
msgid "[:c:member:`~PyTypeObject.tp_subclasses`]"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:138
msgid "__subclasses__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:140
msgid "[:c:member:`~PyTypeObject.tp_weaklist`]"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:142
msgid "(:c:member:`~PyTypeObject.tp_del`)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:144
msgid "[:c:member:`~PyTypeObject.tp_version_tag`]"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:144
msgid "unsigned int"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:146
msgid ":c:member:`~PyTypeObject.tp_finalize`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:146
msgid "__del__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:149
msgid "If :const:`COUNT_ALLOCS` is defined then the following (internal-only) fields exist as well:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:152
msgid ":c:member:`~PyTypeObject.tp_allocs`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:153
msgid ":c:member:`~PyTypeObject.tp_frees`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:154
msgid ":c:member:`~PyTypeObject.tp_maxalloc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:155
msgid ":c:member:`~PyTypeObject.tp_prev`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:156
msgid ":c:member:`~PyTypeObject.tp_next`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:159
msgid "A slot name in parentheses indicates it is (effectively) deprecated. Names in angle brackets should be treated as read-only. Names in square brackets are for internal use only. \"<R>\" (as a prefix) means the field is required (must be non-*NULL*)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:163
msgid "Columns:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:165
msgid "**\"O\"**:  set on :c:type:`PyBaseObject_Type`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:167
msgid "**\"T\"**:  set on :c:type:`PyType_Type`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:169
msgid "**\"D\"**:  default (if slot is set to *NULL*)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:179
msgid "**\"I\"**:  inheritance"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:188
msgid "Note that some slots are effectively inherited through the normal attribute lookup chain."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:194
msgid "sub-slots"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:200
msgid "Slot"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:200
msgid "special methods"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:203
msgid ":c:member:`~PyAsyncMethods.am_await`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:203
#: ../cpython/Doc/c-api/typeobj.rst:205
#: ../cpython/Doc/c-api/typeobj.rst:207
#: ../cpython/Doc/c-api/typeobj.rst:239
#: ../cpython/Doc/c-api/typeobj.rst:241
#: ../cpython/Doc/c-api/typeobj.rst:243
#: ../cpython/Doc/c-api/typeobj.rst:247
#: ../cpython/Doc/c-api/typeobj.rst:274
#: ../cpython/Doc/c-api/typeobj.rst:278
#: ../cpython/Doc/c-api/typeobj.rst:434
msgid ":c:type:`unaryfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:203
msgid "__await__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:205
msgid ":c:member:`~PyAsyncMethods.am_aiter`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:205
msgid "__aiter__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:207
msgid ":c:member:`~PyAsyncMethods.am_anext`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:207
msgid "__anext__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:211
msgid ":c:member:`~PyNumberMethods.nb_add`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:211
#: ../cpython/Doc/c-api/typeobj.rst:214
#: ../cpython/Doc/c-api/typeobj.rst:216
#: ../cpython/Doc/c-api/typeobj.rst:219
#: ../cpython/Doc/c-api/typeobj.rst:221
#: ../cpython/Doc/c-api/typeobj.rst:224
#: ../cpython/Doc/c-api/typeobj.rst:226
#: ../cpython/Doc/c-api/typeobj.rst:229
#: ../cpython/Doc/c-api/typeobj.rst:231
#: ../cpython/Doc/c-api/typeobj.rst:249
#: ../cpython/Doc/c-api/typeobj.rst:252
#: ../cpython/Doc/c-api/typeobj.rst:254
#: ../cpython/Doc/c-api/typeobj.rst:257
#: ../cpython/Doc/c-api/typeobj.rst:259
#: ../cpython/Doc/c-api/typeobj.rst:262
#: ../cpython/Doc/c-api/typeobj.rst:264
#: ../cpython/Doc/c-api/typeobj.rst:267
#: ../cpython/Doc/c-api/typeobj.rst:269
#: ../cpython/Doc/c-api/typeobj.rst:272
#: ../cpython/Doc/c-api/typeobj.rst:280
#: ../cpython/Doc/c-api/typeobj.rst:282
#: ../cpython/Doc/c-api/typeobj.rst:284
#: ../cpython/Doc/c-api/typeobj.rst:286
#: ../cpython/Doc/c-api/typeobj.rst:288
#: ../cpython/Doc/c-api/typeobj.rst:290
#: ../cpython/Doc/c-api/typeobj.rst:293
#: ../cpython/Doc/c-api/typeobj.rst:299
#: ../cpython/Doc/c-api/typeobj.rst:308
#: ../cpython/Doc/c-api/typeobj.rst:319
#: ../cpython/Doc/c-api/typeobj.rst:438
msgid ":c:type:`binaryfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:211
msgid "__add__ __radd__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:214
msgid ":c:member:`~PyNumberMethods.nb_inplace_add`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:214
#: ../cpython/Doc/c-api/typeobj.rst:319
msgid "__iadd__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:216
msgid ":c:member:`~PyNumberMethods.nb_subtract`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:216
msgid "__sub__ __rsub__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:219
msgid ":c:member:`~PyNumberMethods.nb_inplace_subtract`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:219
msgid "__sub__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:221
msgid ":c:member:`~PyNumberMethods.nb_multiply`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:221
msgid "__mul__ __rmul__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:224
msgid ":c:member:`~PyNumberMethods.nb_inplace_multiply`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:224
#: ../cpython/Doc/c-api/typeobj.rst:310
msgid "__mul__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:226
msgid ":c:member:`~PyNumberMethods.nb_remainder`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:226
msgid "__mod__ __rmod__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:229
msgid ":c:member:`~PyNumberMethods.nb_inplace_remainder`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:229
msgid "__mod__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:231
msgid ":c:member:`~PyNumberMethods.nb_divmod`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:231
msgid "__divmod__ __rdivmod__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:234
msgid ":c:member:`~PyNumberMethods.nb_power`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:234
msgid "__pow__ __rpow__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:237
msgid ":c:member:`~PyNumberMethods.nb_inplace_power`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:237
msgid "__pow__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:239
msgid ":c:member:`~PyNumberMethods.nb_negative`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:239
msgid "__neg__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:241
msgid ":c:member:`~PyNumberMethods.nb_positive`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:241
msgid "__pos__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:243
msgid ":c:member:`~PyNumberMethods.nb_absolute`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:243
msgid "__abs__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:245
msgid ":c:member:`~PyNumberMethods.nb_bool`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:245
msgid "__bool__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:247
msgid ":c:member:`~PyNumberMethods.nb_invert`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:247
msgid "__invert__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:249
msgid ":c:member:`~PyNumberMethods.nb_lshift`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:249
msgid "__lshift__ __rlshift__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:252
msgid ":c:member:`~PyNumberMethods.nb_inplace_lshift`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:252
msgid "__lshift__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:254
msgid ":c:member:`~PyNumberMethods.nb_rshift`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:254
msgid "__rshift__ __rrshift__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:257
msgid ":c:member:`~PyNumberMethods.nb_inplace_rshift`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:257
msgid "__rshift__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:259
msgid ":c:member:`~PyNumberMethods.nb_and`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:259
msgid "__and__ __rand__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:262
msgid ":c:member:`~PyNumberMethods.nb_inplace_and`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:262
msgid "__and__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:264
msgid ":c:member:`~PyNumberMethods.nb_xor`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:264
msgid "__xor__ __rxor__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:267
msgid ":c:member:`~PyNumberMethods.nb_inplace_xor`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:267
msgid "__xor__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:269
msgid ":c:member:`~PyNumberMethods.nb_or`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:269
msgid "__or__ __ror__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:272
msgid ":c:member:`~PyNumberMethods.nb_inplace_or`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:272
msgid "__or__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:274
msgid ":c:member:`~PyNumberMethods.nb_int`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:274
msgid "__int__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:276
msgid ":c:member:`~PyNumberMethods.nb_reserved`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:276
#: ../cpython/Doc/c-api/typeobj.rst:343
#: ../cpython/Doc/c-api/typeobj.rst:345
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:432
msgid "void *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:278
msgid ":c:member:`~PyNumberMethods.nb_float`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:278
msgid "__float__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:280
msgid ":c:member:`~PyNumberMethods.nb_floor_divide`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:280
#: ../cpython/Doc/c-api/typeobj.rst:282
msgid "__floordiv__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:282
msgid ":c:member:`~PyNumberMethods.nb_inplace_floor_divide`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:284
msgid ":c:member:`~PyNumberMethods.nb_true_divide`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:284
#: ../cpython/Doc/c-api/typeobj.rst:286
msgid "__truediv__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:286
msgid ":c:member:`~PyNumberMethods.nb_inplace_true_divide`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:288
msgid ":c:member:`~PyNumberMethods.nb_index`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:288
msgid "__index__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:290
msgid ":c:member:`~PyNumberMethods.nb_matrix_multiply`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:290
msgid "__matmul__ __rmatmul__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:293
msgid ":c:member:`~PyNumberMethods.nb_inplace_matrix_multiply`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:293
msgid "__matmul__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:297
msgid ":c:member:`~PyMappingMethods.mp_length`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:297
#: ../cpython/Doc/c-api/typeobj.rst:306
#: ../cpython/Doc/c-api/typeobj.rst:419
msgid ":c:type:`lenfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:297
#: ../cpython/Doc/c-api/typeobj.rst:306
msgid "__len__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:299
msgid ":c:member:`~PyMappingMethods.mp_subscript`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:299
#: ../cpython/Doc/c-api/typeobj.rst:312
msgid "__getitem__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:301
msgid ":c:member:`~PyMappingMethods.mp_ass_subscript`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:301
#: ../cpython/Doc/c-api/typeobj.rst:464
msgid ":c:type:`objobjargproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:301
msgid "__setitem__, __delitem__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:306
msgid ":c:member:`~PySequenceMethods.sq_length`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:308
msgid ":c:member:`~PySequenceMethods.sq_concat`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:308
msgid "__add__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:310
msgid ":c:member:`~PySequenceMethods.sq_repeat`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:310
#: ../cpython/Doc/c-api/typeobj.rst:312
#: ../cpython/Doc/c-api/typeobj.rst:321
#: ../cpython/Doc/c-api/typeobj.rst:449
msgid ":c:type:`ssizeargfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:312
msgid ":c:member:`~PySequenceMethods.sq_item`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:314
msgid ":c:member:`~PySequenceMethods.sq_ass_item`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:314
#: ../cpython/Doc/c-api/typeobj.rst:454
msgid ":c:type:`ssizeobjargproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:314
msgid "__setitem__ __delitem__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:317
msgid ":c:member:`~PySequenceMethods.sq_contains`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:317
#: ../cpython/Doc/c-api/typeobj.rst:459
msgid ":c:type:`objobjproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:317
msgid "__contains__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:319
msgid ":c:member:`~PySequenceMethods.sq_inplace_concat`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:321
msgid ":c:member:`~PySequenceMethods.sq_inplace_repeat`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:321
msgid "__imul__"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:325
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:325
msgid ":c:func:`getbufferproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:327
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:327
msgid ":c:func:`releasebufferproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:333
msgid "slot typedefs"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:336
msgid "typedef"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:336
msgid "Parameter Types"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:336
msgid "Return Type"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:343
#: ../cpython/Doc/c-api/typeobj.rst:345
#: ../cpython/Doc/c-api/typeobj.rst:427
msgid "void"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:0
msgid ":c:type:`visitproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:347
#: ../cpython/Doc/c-api/typeobj.rst:359
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:367
#: ../cpython/Doc/c-api/typeobj.rst:378
#: ../cpython/Doc/c-api/typeobj.rst:389
#: ../cpython/Doc/c-api/typeobj.rst:401
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:421
#: ../cpython/Doc/c-api/typeobj.rst:432
#: ../cpython/Doc/c-api/typeobj.rst:454
#: ../cpython/Doc/c-api/typeobj.rst:459
#: ../cpython/Doc/c-api/typeobj.rst:464
msgid "int"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:367
msgid ":c:type:`printfunc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:0
msgid "FILE *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:407
msgid "Py_hash_t"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:421
msgid ":c:type:`getbufferproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:0
#: ../cpython/Doc/c-api/typeobj.rst:0
msgid ":c:type:`Py_buffer` *"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:427
msgid ":c:type:`releasebufferproc`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:471
msgid "See :ref:`slot-typedefs` below for more detail."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:475
msgid "PyTypeObject Definition"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:477
msgid "The structure definition for :c:type:`PyTypeObject` can be found in :file:`Include/object.h`.  For convenience of reference, this repeats the definition found there:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:487
msgid "PyObject Slots"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:489
msgid "The type object structure extends the :c:type:`PyVarObject` structure. The :attr:`ob_size` field is used for dynamic types (created by  :func:`type_new`, usually called from a class statement). Note that :c:data:`PyType_Type` (the metatype) initializes :c:member:`~PyTypeObject.tp_itemsize`, which means that its instances (i.e. type objects) *must* have the :attr:`ob_size` field."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:499
msgid "These fields are only present when the macro ``Py_TRACE_REFS`` is defined. Their initialization to *NULL* is taken care of by the ``PyObject_HEAD_INIT`` macro.  For statically allocated objects, these fields always remain *NULL*. For dynamically allocated objects, these two fields are used to link the object into a doubly-linked list of *all* live objects on the heap.  This could be used for various debugging purposes; currently the only use is to print the objects that are still alive at the end of a run when the environment variable :envvar:`PYTHONDUMPREFS` is set."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:508
#: ../cpython/Doc/c-api/typeobj.rst:521
#: ../cpython/Doc/c-api/typeobj.rst:544
#: ../cpython/Doc/c-api/typeobj.rst:557
#: ../cpython/Doc/c-api/typeobj.rst:599
#: ../cpython/Doc/c-api/typeobj.rst:642
#: ../cpython/Doc/c-api/typeobj.rst:673
#: ../cpython/Doc/c-api/typeobj.rst:691
#: ../cpython/Doc/c-api/typeobj.rst:708
#: ../cpython/Doc/c-api/typeobj.rst:726
#: ../cpython/Doc/c-api/typeobj.rst:750
#: ../cpython/Doc/c-api/typeobj.rst:767
#: ../cpython/Doc/c-api/typeobj.rst:779
#: ../cpython/Doc/c-api/typeobj.rst:791
#: ../cpython/Doc/c-api/typeobj.rst:824
#: ../cpython/Doc/c-api/typeobj.rst:842
#: ../cpython/Doc/c-api/typeobj.rst:862
#: ../cpython/Doc/c-api/typeobj.rst:883
#: ../cpython/Doc/c-api/typeobj.rst:909
#: ../cpython/Doc/c-api/typeobj.rst:928
#: ../cpython/Doc/c-api/typeobj.rst:944
#: ../cpython/Doc/c-api/typeobj.rst:980
#: ../cpython/Doc/c-api/typeobj.rst:991
#: ../cpython/Doc/c-api/typeobj.rst:1001
#: ../cpython/Doc/c-api/typeobj.rst:1011
#: ../cpython/Doc/c-api/typeobj.rst:1025
#: ../cpython/Doc/c-api/typeobj.rst:1044
#: ../cpython/Doc/c-api/typeobj.rst:1083
#: ../cpython/Doc/c-api/typeobj.rst:1125
#: ../cpython/Doc/c-api/typeobj.rst:1186
#: ../cpython/Doc/c-api/typeobj.rst:1251
#: ../cpython/Doc/c-api/typeobj.rst:1281
#: ../cpython/Doc/c-api/typeobj.rst:1313
#: ../cpython/Doc/c-api/typeobj.rst:1336
#: ../cpython/Doc/c-api/typeobj.rst:1349
#: ../cpython/Doc/c-api/typeobj.rst:1364
#: ../cpython/Doc/c-api/typeobj.rst:1378
#: ../cpython/Doc/c-api/typeobj.rst:1408
#: ../cpython/Doc/c-api/typeobj.rst:1428
#: ../cpython/Doc/c-api/typeobj.rst:1454
#: ../cpython/Doc/c-api/typeobj.rst:1472
#: ../cpython/Doc/c-api/typeobj.rst:1512
#: ../cpython/Doc/c-api/typeobj.rst:1561
#: ../cpython/Doc/c-api/typeobj.rst:1578
#: ../cpython/Doc/c-api/typeobj.rst:1616
#: ../cpython/Doc/c-api/typeobj.rst:1637
#: ../cpython/Doc/c-api/typeobj.rst:1669
#: ../cpython/Doc/c-api/typeobj.rst:1686
#: ../cpython/Doc/c-api/typeobj.rst:1697
#: ../cpython/Doc/c-api/typeobj.rst:1707
#: ../cpython/Doc/c-api/typeobj.rst:1716
#: ../cpython/Doc/c-api/typeobj.rst:1726
#: ../cpython/Doc/c-api/typeobj.rst:1740
#: ../cpython/Doc/c-api/typeobj.rst:1778
msgid "**Inheritance:**"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:510
msgid "These fields are not inherited by subtypes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:515
msgid "This is the type object's reference count, initialized to ``1`` by the ``PyObject_HEAD_INIT`` macro.  Note that for statically allocated type objects, the type's instances (objects whose :attr:`ob_type` points back to the type) do *not* count as references.  But for dynamically allocated type objects, the instances *do* count as references."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:523
#: ../cpython/Doc/c-api/typeobj.rst:559
#: ../cpython/Doc/c-api/typeobj.rst:601
msgid "This field is not inherited by subtypes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:528
msgid "This is the type's type, in other words its metatype.  It is initialized by the argument to the ``PyObject_HEAD_INIT`` macro, and its value should normally be ``&PyType_Type``.  However, for dynamically loadable extension modules that must be usable on Windows (at least), the compiler complains that this is not a valid initializer.  Therefore, the convention is to pass *NULL* to the ``PyObject_HEAD_INIT`` macro and to initialize this field explicitly at the start of the module's initialization function, before doing anything else.  This is typically done like this::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:539
msgid "This should be done before any instances of the type are created. :c:func:`PyType_Ready` checks if :attr:`ob_type` is *NULL*, and if so, initializes it to the :attr:`ob_type` field of the base class. :c:func:`PyType_Ready` will not change this field if it is non-zero."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:546
#: ../cpython/Doc/c-api/typeobj.rst:675
#: ../cpython/Doc/c-api/typeobj.rst:752
#: ../cpython/Doc/c-api/typeobj.rst:844
#: ../cpython/Doc/c-api/typeobj.rst:864
#: ../cpython/Doc/c-api/typeobj.rst:1315
#: ../cpython/Doc/c-api/typeobj.rst:1338
#: ../cpython/Doc/c-api/typeobj.rst:1456
#: ../cpython/Doc/c-api/typeobj.rst:1474
#: ../cpython/Doc/c-api/typeobj.rst:1563
#: ../cpython/Doc/c-api/typeobj.rst:1671
#: ../cpython/Doc/c-api/typeobj.rst:1780
msgid "This field is inherited by subtypes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:550
msgid "PyVarObject Slots"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:554
msgid "For statically allocated type objects, this should be initialized to zero.  For dynamically allocated type objects, this field has a special internal meaning."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:563
msgid "PyTypeObject Slots"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:565
msgid "Each slot has a section describing inheritance.  If :c:func:`PyType_Ready` may set a value when the field is set to *NULL* then there will also be a \"Default\" section.  (Note that many fields set on :c:type:`PyBaseObject_Type` and :c:type:`PyType_Type` effectively act as defaults.)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:572
msgid "Pointer to a NUL-terminated string containing the name of the type. For types that are accessible as module globals, the string should be the full module name, followed by a dot, followed by the type name; for built-in types, it should be just the type name.  If the module is a submodule of a package, the full package name is part of the full module name.  For example, a type named :class:`T` defined in module :mod:`M` in subpackage :mod:`Q` in package :mod:`P` should have the :c:member:`~PyTypeObject.tp_name` initializer ``\"P.Q.M.T\"``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:580
msgid "For dynamically allocated type objects, this should just be the type name, and the module name explicitly stored in the type dict as the value for key ``'__module__'``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:584
msgid "For statically allocated type objects, the tp_name field should contain a dot. Everything before the last dot is made accessible as the :attr:`__module__` attribute, and everything after the last dot is made accessible as the :attr:`~definition.__name__` attribute."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:589
msgid "If no dot is present, the entire :c:member:`~PyTypeObject.tp_name` field is made accessible as the :attr:`~definition.__name__` attribute, and the :attr:`__module__` attribute is undefined (unless explicitly set in the dictionary, as explained above).  This means your type will be impossible to pickle.  Additionally, it will not be listed in module documentations created with pydoc."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:595
msgid "This field must not be *NULL*.  It is the only required field in :c:func:`PyTypeObject` (other than potentially :c:member:`~PyTypeObject.tp_itemsize`)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:607
msgid "These fields allow calculating the size in bytes of instances of the type."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:609
msgid "There are two kinds of types: types with fixed-length instances have a zero :c:member:`~PyTypeObject.tp_itemsize` field, types with variable-length instances have a non-zero :c:member:`~PyTypeObject.tp_itemsize` field.  For a type with fixed-length instances, all instances have the same size, given in :c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:614
msgid "For a type with variable-length instances, the instances must have an :attr:`ob_size` field, and the instance size is :c:member:`~PyTypeObject.tp_basicsize` plus N times :c:member:`~PyTypeObject.tp_itemsize`, where N is the \"length\" of the object.  The value of N is typically stored in the instance's :attr:`ob_size` field.  There are exceptions:  for example, ints use a negative :attr:`ob_size` to indicate a negative number, and N is ``abs(ob_size)`` there.  Also, the presence of an :attr:`ob_size` field in the instance layout doesn't mean that the instance structure is variable-length (for example, the structure for the list type has fixed-length instances, yet those instances have a meaningful :attr:`ob_size` field)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:625
msgid "The basic size includes the fields in the instance declared by the macro :c:macro:`PyObject_HEAD` or :c:macro:`PyObject_VAR_HEAD` (whichever is used to declare the instance struct) and this in turn includes the :attr:`_ob_prev` and :attr:`_ob_next` fields if they are present.  This means that the only correct way to get an initializer for the :c:member:`~PyTypeObject.tp_basicsize` is to use the ``sizeof`` operator on the struct used to declare the instance layout. The basic size does not include the GC header size."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:633
msgid "A note about alignment: if the variable items require a particular alignment, this should be taken care of by the value of :c:member:`~PyTypeObject.tp_basicsize`.  Example: suppose a type implements an array of ``double``. :c:member:`~PyTypeObject.tp_itemsize` is ``sizeof(double)``. It is the programmer's responsibility that :c:member:`~PyTypeObject.tp_basicsize` is a multiple of ``sizeof(double)`` (assuming this is the alignment requirement for ``double``)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:640
msgid "For any type with variable-length instances, this field must not be *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:644
msgid "These fields are inherited separately by subtypes.  If the base type has a non-zero :c:member:`~PyTypeObject.tp_itemsize`, it is generally not safe to set :c:member:`~PyTypeObject.tp_itemsize` to a different non-zero value in a subtype (though this depends on the implementation of the base type)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:652
msgid "A pointer to the instance destructor function.  This function must be defined unless the type guarantees that its instances will never be deallocated (as is the case for the singletons ``None`` and ``Ellipsis``).  The function signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:658
msgid "The destructor function is called by the :c:func:`Py_DECREF` and :c:func:`Py_XDECREF` macros when the new reference count is zero.  At this point, the instance is still in existence, but there are no references to it.  The destructor function should free all references which the instance owns, free all memory buffers owned by the instance (using the freeing function corresponding to the allocation function used to allocate the buffer), and finally (as its last action) call the type's :c:member:`~PyTypeObject.tp_free` function.  If the type is not subtypable (doesn't have the :const:`Py_TPFLAGS_BASETYPE` flag bit set), it is permissible to call the object deallocator directly instead of via :c:member:`~PyTypeObject.tp_free`.  The object deallocator should be the one used to allocate the instance; this is normally :c:func:`PyObject_Del` if the instance was allocated using :c:func:`PyObject_New` or :c:func:`PyObject_VarNew`, or :c:func:`PyObject_GC_Del` if the instance was allocated using :c:func:`PyObject_GC_New` or :c:func:`PyObject_GC_NewVar`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:680
msgid "Reserved slot, formerly used for print formatting in Python 2.x."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:685
msgid "An optional pointer to the get-attribute-string function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:687
msgid "This field is deprecated.  When it is defined, it should point to a function that acts the same as the :c:member:`~PyTypeObject.tp_getattro` function, but taking a C string instead of a Python string object to give the attribute name."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:693
#: ../cpython/Doc/c-api/typeobj.rst:885
msgid "Group: :attr:`tp_getattr`, :attr:`tp_getattro`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:695
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_getattro`: a subtype inherits both :c:member:`~PyTypeObject.tp_getattr` and :c:member:`~PyTypeObject.tp_getattro` from its base type when the subtype's :c:member:`~PyTypeObject.tp_getattr` and :c:member:`~PyTypeObject.tp_getattro` are both *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:702
#: ../cpython/Doc/c-api/typeobj.rst:898
msgid "An optional pointer to the function for setting and deleting attributes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:704
msgid "This field is deprecated.  When it is defined, it should point to a function that acts the same as the :c:member:`~PyTypeObject.tp_setattro` function, but taking a C string instead of a Python string object to give the attribute name."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:710
#: ../cpython/Doc/c-api/typeobj.rst:911
msgid "Group: :attr:`tp_setattr`, :attr:`tp_setattro`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:712
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_setattro`: a subtype inherits both :c:member:`~PyTypeObject.tp_setattr` and :c:member:`~PyTypeObject.tp_setattro` from its base type when the subtype's :c:member:`~PyTypeObject.tp_setattr` and :c:member:`~PyTypeObject.tp_setattro` are both *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:719
msgid "Pointer to an additional structure that contains fields relevant only to objects which implement :term:`awaitable` and :term:`asynchronous iterator` protocols at the C-level.  See :ref:`async-structs` for details."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:723
msgid "Formerly known as ``tp_compare`` and ``tp_reserved``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:728
msgid "The :c:member:`~PyTypeObject.tp_as_async` field is not inherited, but the contained fields are inherited individually."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:736
msgid "An optional pointer to a function that implements the built-in function :func:`repr`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:739
msgid "The signature is the same as for :c:func:`PyObject_Repr`::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:743
msgid "The function must return a string or a Unicode object.  Ideally, this function should return a string that, when passed to :func:`eval`, given a suitable environment, returns an object with the same value.  If this is not feasible, it should return a string starting with ``'<'`` and ending with ``'>'`` from which both the type and the value of the object can be deduced."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:754
#: ../cpython/Doc/c-api/typeobj.rst:866
#: ../cpython/Doc/c-api/typeobj.rst:891
#: ../cpython/Doc/c-api/typeobj.rst:917
#: ../cpython/Doc/c-api/typeobj.rst:959
#: ../cpython/Doc/c-api/typeobj.rst:1260
#: ../cpython/Doc/c-api/typeobj.rst:1412
#: ../cpython/Doc/c-api/typeobj.rst:1433
#: ../cpython/Doc/c-api/typeobj.rst:1531
#: ../cpython/Doc/c-api/typeobj.rst:1565
#: ../cpython/Doc/c-api/typeobj.rst:1583
#: ../cpython/Doc/c-api/typeobj.rst:1621
#: ../cpython/Doc/c-api/typeobj.rst:1642
#: ../cpython/Doc/c-api/typeobj.rst:1673
msgid "**Default:**"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:756
msgid "When this field is not set, a string of the form ``<%s object at %p>`` is returned, where ``%s`` is replaced by the type name, and ``%p`` by the object's memory address."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:763
msgid "Pointer to an additional structure that contains fields relevant only to objects which implement the number protocol.  These fields are documented in :ref:`number-structs`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:769
msgid "The :c:member:`~PyTypeObject.tp_as_number` field is not inherited, but the contained fields are inherited individually."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:775
msgid "Pointer to an additional structure that contains fields relevant only to objects which implement the sequence protocol.  These fields are documented in :ref:`sequence-structs`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:781
msgid "The :c:member:`~PyTypeObject.tp_as_sequence` field is not inherited, but the contained fields are inherited individually."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:787
msgid "Pointer to an additional structure that contains fields relevant only to objects which implement the mapping protocol.  These fields are documented in :ref:`mapping-structs`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:793
msgid "The :c:member:`~PyTypeObject.tp_as_mapping` field is not inherited, but the contained fields are inherited individually."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:801
msgid "An optional pointer to a function that implements the built-in function :func:`hash`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:804
msgid "The signature is the same as for :c:func:`PyObject_Hash`::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:808
msgid "The value ``-1`` should not be returned as a normal return value; when an error occurs during the computation of the hash value, the function should set an exception and return ``-1``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:812
msgid "When this field is not set (*and* :attr:`tp_richcompare` is not set), an attempt to take the hash of the object raises :exc:`TypeError`. This is the same as setting it to :c:func:`PyObject_HashNotImplemented`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:816
msgid "This field can be set explicitly to :c:func:`PyObject_HashNotImplemented` to block inheritance of the hash method from a parent type. This is interpreted as the equivalent of ``__hash__ = None`` at the Python level, causing ``isinstance(o, collections.Hashable)`` to correctly return ``False``. Note that the converse is also true - setting ``__hash__ = None`` on a class at the Python level will result in the ``tp_hash`` slot being set to :c:func:`PyObject_HashNotImplemented`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:826
#: ../cpython/Doc/c-api/typeobj.rst:1253
msgid "Group: :attr:`tp_hash`, :attr:`tp_richcompare`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:828
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_richcompare`: a subtype inherits both of :c:member:`~PyTypeObject.tp_richcompare` and :c:member:`~PyTypeObject.tp_hash`, when the subtype's :c:member:`~PyTypeObject.tp_richcompare` and :c:member:`~PyTypeObject.tp_hash` are both *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:836
msgid "An optional pointer to a function that implements calling the object.  This should be *NULL* if the object is not callable.  The signature is the same as for :c:func:`PyObject_Call`::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:849
msgid "An optional pointer to a function that implements the built-in operation :func:`str`.  (Note that :class:`str` is a type now, and :func:`str` calls the constructor for that type.  This constructor calls :c:func:`PyObject_Str` to do the actual work, and :c:func:`PyObject_Str` will call this handler.)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:854
msgid "The signature is the same as for :c:func:`PyObject_Str`::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:858
msgid "The function must return a string or a Unicode object.  It should be a \"friendly\" string representation of the object, as this is the representation that will be used, among other things, by the :func:`print` function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:868
msgid "When this field is not set, :c:func:`PyObject_Repr` is called to return a string representation."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:874
msgid "An optional pointer to the get-attribute function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:876
msgid "The signature is the same as for :c:func:`PyObject_GetAttr`::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:880
msgid "It is usually convenient to set this field to :c:func:`PyObject_GenericGetAttr`, which implements the normal way of looking for object attributes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:887
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_getattr`: a subtype inherits both :c:member:`~PyTypeObject.tp_getattr` and :c:member:`~PyTypeObject.tp_getattro` from its base type when the subtype's :c:member:`~PyTypeObject.tp_getattr` and :c:member:`~PyTypeObject.tp_getattro` are both *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:893
msgid ":c:type:`PyBaseObject_Type` uses :c:func:`PyObject_GenericGetAttr`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:900
msgid "The signature is the same as for :c:func:`PyObject_SetAttr`::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:904
msgid "In addition, setting *value* to *NULL* to delete an attribute must be supported.  It is usually convenient to set this field to :c:func:`PyObject_GenericSetAttr`, which implements the normal way of setting object attributes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:913
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_setattr`: a subtype inherits both :c:member:`~PyTypeObject.tp_setattr` and :c:member:`~PyTypeObject.tp_setattro` from its base type when the subtype's :c:member:`~PyTypeObject.tp_setattr` and :c:member:`~PyTypeObject.tp_setattro` are both *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:919
msgid ":c:type:`PyBaseObject_Type` uses :c:func:`PyObject_GenericSetAttr`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:924
msgid "Pointer to an additional structure that contains fields relevant only to objects which implement the buffer interface.  These fields are documented in :ref:`buffer-structs`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:930
msgid "The :c:member:`~PyTypeObject.tp_as_buffer` field is not inherited, but the contained fields are inherited individually."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:936
msgid "This field is a bit mask of various flags.  Some flags indicate variant semantics for certain situations; others are used to indicate that certain fields in the type object (or in the extension structures referenced via :c:member:`~PyTypeObject.tp_as_number`, :c:member:`~PyTypeObject.tp_as_sequence`, :c:member:`~PyTypeObject.tp_as_mapping`, and :c:member:`~PyTypeObject.tp_as_buffer`) that were historically not always present are valid; if such a flag bit is clear, the type fields it guards must not be accessed and must be considered to have a zero or *NULL* value instead."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:946
msgid "Inheritance of this field is complicated.  Most flag bits are inherited individually, i.e. if the base type has a flag bit set, the subtype inherits this flag bit.  The flag bits that pertain to extension structures are strictly inherited if the extension structure is inherited, i.e. the base type's value of the flag bit is copied into the subtype together with a pointer to the extension structure.  The :const:`Py_TPFLAGS_HAVE_GC` flag bit is inherited together with the :c:member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear` fields, i.e. if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the subtype and the :c:member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear` fields in the subtype exist and have *NULL* values."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:961
msgid ":c:type:`PyBaseObject_Type` uses ``Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:964
msgid "**Bit Masks:**"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:966
msgid "The following bit masks are currently defined; these can be ORed together using the ``|`` operator to form the value of the :c:member:`~PyTypeObject.tp_flags` field.  The macro :c:func:`PyType_HasFeature` takes a type and a flags value, *tp* and *f*, and checks whether ``tp->tp_flags & f`` is non-zero."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:973
msgid "This bit is set when the type object itself is allocated on the heap.  In this case, the :attr:`ob_type` field of its instances is considered a reference to the type, and the type object is INCREF'ed when a new instance is created, and DECREF'ed when an instance is destroyed (this does not apply to instances of subtypes; only the type referenced by the instance's ob_type gets INCREF'ed or DECREF'ed)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:982
#: ../cpython/Doc/c-api/typeobj.rst:993
#: ../cpython/Doc/c-api/typeobj.rst:1003
#: ../cpython/Doc/c-api/typeobj.rst:1013
#: ../cpython/Doc/c-api/typeobj.rst:1046
msgid "???"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:987
msgid "This bit is set when the type can be used as the base type of another type.  If this bit is clear, the type cannot be subtyped (similar to a \"final\" class in Java)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:998
msgid "This bit is set when the type object has been fully initialized by :c:func:`PyType_Ready`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1008
msgid "This bit is set while :c:func:`PyType_Ready` is in the process of initializing the type object."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1018
msgid "This bit is set when the object supports garbage collection.  If this bit is set, instances must be created using :c:func:`PyObject_GC_New` and destroyed using :c:func:`PyObject_GC_Del`.  More information in section :ref:`supporting-cycle-detection`.  This bit also implies that the GC-related fields :c:member:`~PyTypeObject.tp_traverse` and :c:member:`~PyTypeObject.tp_clear` are present in the type object."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1027
#: ../cpython/Doc/c-api/typeobj.rst:1127
#: ../cpython/Doc/c-api/typeobj.rst:1188
msgid "Group: :const:`Py_TPFLAGS_HAVE_GC`, :attr:`tp_traverse`, :attr:`tp_clear`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1029
msgid "The :const:`Py_TPFLAGS_HAVE_GC` flag bit is inherited together with the :attr:`tp_traverse` and :attr:`tp_clear` fields, i.e.  if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is clear in the subtype and the :attr:`tp_traverse` and :attr:`tp_clear` fields in the subtype exist and have *NULL* values."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1039
msgid "This is a bitmask of all the bits that pertain to the existence of certain fields in the type object and its extension structures. Currently, it includes the following bits: :const:`Py_TPFLAGS_HAVE_STACKLESS_EXTENSION`, :const:`Py_TPFLAGS_HAVE_VERSION_TAG`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1060
msgid "These flags are used by functions such as :c:func:`PyLong_Check` to quickly determine if a type is a subclass of a built-in type; such specific checks are faster than a generic check, like :c:func:`PyObject_IsInstance`. Custom types that inherit from built-ins should have their :c:member:`~PyTypeObject.tp_flags` set appropriately, or the code that interacts with such types will behave differently depending on what kind of check is used."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1071
msgid "This bit is set when the :c:member:`~PyTypeObject.tp_finalize` slot is present in the type structure."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1079
msgid "An optional pointer to a NUL-terminated C string giving the docstring for this type object.  This is exposed as the :attr:`__doc__` attribute on the type and instances of the type."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1085
msgid "This field is *not* inherited by subtypes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1090
msgid "An optional pointer to a traversal function for the garbage collector.  This is only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  The signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1095
#: ../cpython/Doc/c-api/typeobj.rst:1183
msgid "More information about Python's garbage collection scheme can be found in section :ref:`supporting-cycle-detection`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1098
msgid "The :c:member:`~PyTypeObject.tp_traverse` pointer is used by the garbage collector to detect reference cycles. A typical implementation of a :c:member:`~PyTypeObject.tp_traverse` function simply calls :c:func:`Py_VISIT` on each of the instance's members that are Python objects.  For example, this is function :c:func:`local_traverse` from the :mod:`_thread` extension module::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1113
msgid "Note that :c:func:`Py_VISIT` is called only on those members that can participate in reference cycles.  Although there is also a ``self->key`` member, it can only be *NULL* or a Python string and therefore cannot be part of a reference cycle."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1117
msgid "On the other hand, even if you know a member can never be part of a cycle, as a debugging aid you may want to visit it anyway just so the :mod:`gc` module's :func:`~gc.get_referents` function will include it."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1121
msgid "Note that :c:func:`Py_VISIT` requires the *visit* and *arg* parameters to :c:func:`local_traverse` to have these specific names; don't name them just anything."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1129
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_clear` and the :const:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :c:member:`~PyTypeObject.tp_traverse`, and :c:member:`~PyTypeObject.tp_clear` are all inherited from the base type if they are all zero in the subtype."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1137
msgid "An optional pointer to a clear function for the garbage collector. This is only used if the :const:`Py_TPFLAGS_HAVE_GC` flag bit is set.  The signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1142
msgid "The :c:member:`~PyTypeObject.tp_clear` member function is used to break reference cycles in cyclic garbage detected by the garbage collector.  Taken together, all :c:member:`~PyTypeObject.tp_clear` functions in the system must combine to break all reference cycles.  This is subtle, and if in any doubt supply a :c:member:`~PyTypeObject.tp_clear` function.  For example, the tuple type does not implement a :c:member:`~PyTypeObject.tp_clear` function, because it's possible to prove that no reference cycle can be composed entirely of tuples. Therefore the :c:member:`~PyTypeObject.tp_clear` functions of other types must be sufficient to break any cycle containing a tuple.  This isn't immediately obvious, and there's rarely a good reason to avoid implementing :c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1152
msgid "Implementations of :c:member:`~PyTypeObject.tp_clear` should drop the instance's references to those of its members that may be Python objects, and set its pointers to those members to *NULL*, as in the following example::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1166
msgid "The :c:func:`Py_CLEAR` macro should be used, because clearing references is delicate:  the reference to the contained object must not be decremented until after the pointer to the contained object is set to *NULL*.  This is because decrementing the reference count may cause the contained object to become trash, triggering a chain of reclamation activity that may include invoking arbitrary Python code (due to finalizers, or weakref callbacks, associated with the contained object). If it's possible for such code to reference *self* again, it's important that the pointer to the contained object be *NULL* at that time, so that *self* knows the contained object can no longer be used.  The :c:func:`Py_CLEAR` macro performs the operations in a safe order."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1177
msgid "Because the goal of :c:member:`~PyTypeObject.tp_clear` functions is to break reference cycles, it's not necessary to clear contained objects like Python strings or Python integers, which can't participate in reference cycles. On the other hand, it may be convenient to clear all contained Python objects, and write the type's :c:member:`~PyTypeObject.tp_dealloc` function to invoke :c:member:`~PyTypeObject.tp_clear`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1190
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_traverse` and the :const:`Py_TPFLAGS_HAVE_GC` flag bit: the flag bit, :c:member:`~PyTypeObject.tp_traverse`, and :c:member:`~PyTypeObject.tp_clear` are all inherited from the base type if they are all zero in the subtype."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1198
msgid "An optional pointer to the rich comparison function, whose signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1202
msgid "The first parameter is guaranteed to be an instance of the type that is defined by :c:type:`PyTypeObject`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1205
msgid "The function should return the result of the comparison (usually ``Py_True`` or ``Py_False``).  If the comparison is undefined, it must return ``Py_NotImplemented``, if another error occurred it must return *NULL* and set an exception condition."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1212
msgid "If you want to implement a type for which only a limited set of comparisons makes sense (e.g. ``==`` and ``!=``, but not ``<`` and friends), directly raise :exc:`TypeError` in the rich comparison function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1216
msgid "The following constants are defined to be used as the third argument for :c:member:`~PyTypeObject.tp_richcompare` and for :c:func:`PyObject_RichCompare`:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1220
msgid "Constant"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1220
msgid "Comparison"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1222
msgid ":const:`Py_LT`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1222
msgid "``<``"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1224
msgid ":const:`Py_LE`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1224
msgid "``<=``"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1226
msgid ":const:`Py_EQ`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1226
msgid "``==``"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1228
msgid ":const:`Py_NE`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1228
msgid "``!=``"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1230
msgid ":const:`Py_GT`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1230
msgid "``>``"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1232
msgid ":const:`Py_GE`"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1232
msgid "``>=``"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1235
msgid "The following macro is defined to ease writing rich comparison functions:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1239
msgid "Return ``Py_True`` or ``Py_False`` from the function, depending on the result of a comparison. VAL_A and VAL_B must be orderable by C comparison operators (for example, they may be C ints or floats). The third argument specifies the requested operation, as for :c:func:`PyObject_RichCompare`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1245
msgid "The return value's reference count is properly incremented."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1247
msgid "On error, sets an exception and returns *NULL* from the function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1255
msgid "This field is inherited by subtypes together with :c:member:`~PyTypeObject.tp_hash`: a subtype inherits :c:member:`~PyTypeObject.tp_richcompare` and :c:member:`~PyTypeObject.tp_hash` when the subtype's :c:member:`~PyTypeObject.tp_richcompare` and :c:member:`~PyTypeObject.tp_hash` are both *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1262
msgid ":c:type:`PyBaseObject_Type` provides a :attr:`tp_richcompare` implementation, which may be inherited.  However, if only :attr:`tp_hash` is defined, not even the inherited function is used and instances of the type will not be able to participate in any comparisons."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1271
msgid "If the instances of this type are weakly referenceable, this field is greater than zero and contains the offset in the instance structure of the weak reference list head (ignoring the GC header, if present); this offset is used by :c:func:`PyObject_ClearWeakRefs` and the :c:func:`PyWeakref_\\*` functions.  The instance structure needs to include a field of type :c:type:`PyObject\\*` which is initialized to *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1278
msgid "Do not confuse this field with :c:member:`~PyTypeObject.tp_weaklist`; that is the list head for weak references to the type object itself."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1283
msgid "This field is inherited by subtypes, but see the rules listed below. A subtype may override this offset; this means that the subtype uses a different weak reference list head than the base type.  Since the list head is always found via :c:member:`~PyTypeObject.tp_weaklistoffset`, this should not be a problem."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1288
msgid "When a type defined by a class statement has no :attr:`~object.__slots__` declaration, and none of its base types are weakly referenceable, the type is made weakly referenceable by adding a weak reference list head slot to the instance layout and setting the :c:member:`~PyTypeObject.tp_weaklistoffset` of that slot's offset."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1293
msgid "When a type's :attr:`__slots__` declaration contains a slot named :attr:`__weakref__`, that slot becomes the weak reference list head for instances of the type, and the slot's offset is stored in the type's :c:member:`~PyTypeObject.tp_weaklistoffset`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1298
msgid "When a type's :attr:`__slots__` declaration does not contain a slot named :attr:`__weakref__`, the type inherits its :c:member:`~PyTypeObject.tp_weaklistoffset` from its base type."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1305
msgid "An optional pointer to a function that returns an iterator for the object.  Its presence normally signals that the instances of this type are iterable (although sequences may be iterable without this function)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1309
msgid "This function has the same signature as :c:func:`PyObject_GetIter`::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1320
msgid "An optional pointer to a function that returns the next item in an iterator. The signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1325
msgid "When the iterator is exhausted, it must return *NULL*; a :exc:`StopIteration` exception may or may not be set.  When another error occurs, it must return *NULL* too.  Its presence signals that the instances of this type are iterators."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1330
msgid "Iterator types should also define the :c:member:`~PyTypeObject.tp_iter` function, and that function should return the iterator instance itself (not a new iterator instance)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1334
msgid "This function has the same signature as :c:func:`PyIter_Next`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1343
msgid "An optional pointer to a static *NULL*-terminated array of :c:type:`PyMethodDef` structures, declaring regular methods of this type."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1346
msgid "For each entry in the array, an entry is added to the type's dictionary (see :c:member:`~PyTypeObject.tp_dict` below) containing a method descriptor."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1351
msgid "This field is not inherited by subtypes (methods are inherited through a different mechanism)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1357
msgid "An optional pointer to a static *NULL*-terminated array of :c:type:`PyMemberDef` structures, declaring regular data members (fields or slots) of instances of this type."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1361
msgid "For each entry in the array, an entry is added to the type's dictionary (see :c:member:`~PyTypeObject.tp_dict` below) containing a member descriptor."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1366
msgid "This field is not inherited by subtypes (members are inherited through a different mechanism)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1372
msgid "An optional pointer to a static *NULL*-terminated array of :c:type:`PyGetSetDef` structures, declaring computed attributes of instances of this type."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1375
msgid "For each entry in the array, an entry is added to the type's dictionary (see :c:member:`~PyTypeObject.tp_dict` below) containing a getset descriptor."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1380
msgid "This field is not inherited by subtypes (computed attributes are inherited through a different mechanism)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1386
msgid "An optional pointer to a base type from which type properties are inherited.  At this level, only single inheritance is supported; multiple inheritance require dynamically creating a type object by calling the metatype."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1394
msgid "Slot initialization is subject to the rules of initializing globals. C99 requires the initializers to be \"address constants\".  Function designators like :c:func:`PyType_GenericNew`, with implicit conversion to a pointer, are valid C99 address constants."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1399
msgid "However, the unary '&' operator applied to a non-static variable like :c:func:`PyBaseObject_Type` is not required to produce an address constant.  Compilers may support this (gcc does), MSVC does not. Both compilers are strictly standard conforming in this particular behavior."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1405
msgid "Consequently, :c:member:`~PyTypeObject.tp_base` should be set in the extension module's init function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1410
msgid "This field is not inherited by subtypes (obviously)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1414
msgid "This field defaults to ``&PyBaseObject_Type`` (which to Python programmers is known as the type :class:`object`)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1420
msgid "The type's dictionary is stored here by :c:func:`PyType_Ready`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1422
msgid "This field should normally be initialized to *NULL* before PyType_Ready is called; it may also be initialized to a dictionary containing initial attributes for the type.  Once :c:func:`PyType_Ready` has initialized the type, extra attributes for the type may be added to this dictionary only if they don't correspond to overloaded operations (like :meth:`__add__`)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1430
msgid "This field is not inherited by subtypes (though the attributes defined in here are inherited through a different mechanism)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1435
msgid "If this field is *NULL*, :c:func:`PyType_Ready` will assign a new dictionary to it."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1440
msgid "It is not safe to use :c:func:`PyDict_SetItem` on or otherwise modify :c:member:`~PyTypeObject.tp_dict` with the dictionary C-API."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1446
msgid "An optional pointer to a \"descriptor get\" function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1448
#: ../cpython/Doc/c-api/typeobj.rst:1464
#: ../cpython/Doc/c-api/typeobj.rst:1546
#: ../cpython/Doc/c-api/typeobj.rst:1574
#: ../cpython/Doc/c-api/typeobj.rst:1598
msgid "The function signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1461
msgid "An optional pointer to a function for setting and deleting a descriptor's value."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1468
msgid "The *value* argument is set to *NULL* to delete the value."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1479
msgid "If the instances of this type have a dictionary containing instance variables, this field is non-zero and contains the offset in the instances of the type of the instance variable dictionary; this offset is used by :c:func:`PyObject_GenericGetAttr`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1484
msgid "Do not confuse this field with :c:member:`~PyTypeObject.tp_dict`; that is the dictionary for attributes of the type object itself."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1487
msgid "If the value of this field is greater than zero, it specifies the offset from the start of the instance structure.  If the value is less than zero, it specifies the offset from the *end* of the instance structure.  A negative offset is more expensive to use, and should only be used when the instance structure contains a variable-length part.  This is used for example to add an instance variable dictionary to subtypes of :class:`str` or :class:`tuple`. Note that the :c:member:`~PyTypeObject.tp_basicsize` field should account for the dictionary added to the end in that case, even though the dictionary is not included in the basic object layout.  On a system with a pointer size of 4 bytes, :c:member:`~PyTypeObject.tp_dictoffset` should be set to ``-4`` to indicate that the dictionary is at the very end of the structure."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1499
msgid "The real dictionary offset in an instance can be computed from a negative :c:member:`~PyTypeObject.tp_dictoffset` as follows::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1506
msgid "where :c:member:`~PyTypeObject.tp_basicsize`, :c:member:`~PyTypeObject.tp_itemsize` and :c:member:`~PyTypeObject.tp_dictoffset` are taken from the type object, and :attr:`ob_size` is taken from the instance.  The absolute value is taken because ints use the sign of :attr:`ob_size` to store the sign of the number.  (There's never a need to do this calculation yourself; it is done for you by :c:func:`_PyObject_GetDictPtr`.)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1514
msgid "This field is inherited by subtypes, but see the rules listed below. A subtype may override this offset; this means that the subtype instances store the dictionary at a difference offset than the base type.  Since the dictionary is always found via :c:member:`~PyTypeObject.tp_dictoffset`, this should not be a problem."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1519
msgid "When a type defined by a class statement has no :attr:`~object.__slots__` declaration, and none of its base types has an instance variable dictionary, a dictionary slot is added to the instance layout and the :c:member:`~PyTypeObject.tp_dictoffset` is set to that slot's offset."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1524
msgid "When a type defined by a class statement has a :attr:`__slots__` declaration, the type inherits its :c:member:`~PyTypeObject.tp_dictoffset` from its base type."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1527
msgid "(Adding a slot named :attr:`~object.__dict__` to the :attr:`__slots__` declaration does not have the expected effect, it just causes confusion.  Maybe this should be added as a feature just like :attr:`__weakref__` though.)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1533
msgid "This slot has no default.  For static types, if the field is *NULL* then no :attr:`__dict__` gets created for instances."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1539
msgid "An optional pointer to an instance initialization function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1541
msgid "This function corresponds to the :meth:`__init__` method of classes.  Like :meth:`__init__`, it is possible to create an instance without calling :meth:`__init__`, and it is possible to reinitialize an instance by calling its :meth:`__init__` method again."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1550
msgid "The self argument is the instance to be initialized; the *args* and *kwds* arguments represent positional and keyword arguments of the call to :meth:`__init__`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1554
msgid "The :c:member:`~PyTypeObject.tp_init` function, if not *NULL*, is called when an instance is created normally by calling its type, after the type's :c:member:`~PyTypeObject.tp_new` function has returned an instance of the type.  If the :c:member:`~PyTypeObject.tp_new` function returns an instance of some other type that is not a subtype of the original type, no :c:member:`~PyTypeObject.tp_init` function is called; if :c:member:`~PyTypeObject.tp_new` returns an instance of a subtype of the original type, the subtype's :c:member:`~PyTypeObject.tp_init` is called."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1567
msgid "For static types this field does not have a default."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1572
msgid "An optional pointer to an instance allocation function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1580
msgid "This field is inherited by static subtypes, but not by dynamic subtypes (subtypes created by a class statement)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1585
msgid "For dynamic subtypes, this field is always set to :c:func:`PyType_GenericAlloc`, to force a standard heap allocation strategy."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1589
msgid "For static subtypes, :c:type:`PyBaseObject_Type` uses :c:func:`PyType_GenericAlloc`.  That is the recommended value for all statically defined types."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1596
msgid "An optional pointer to an instance creation function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1602
msgid "The subtype argument is the type of the object being created; the *args* and *kwds* arguments represent positional and keyword arguments of the call to the type.  Note that subtype doesn't have to equal the type whose :c:member:`~PyTypeObject.tp_new` function is called; it may be a subtype of that type (but not an unrelated type)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1608
msgid "The :c:member:`~PyTypeObject.tp_new` function should call ``subtype->tp_alloc(subtype, nitems)`` to allocate space for the object, and then do only as much further initialization as is absolutely necessary.  Initialization that can safely be ignored or repeated should be placed in the :c:member:`~PyTypeObject.tp_init` handler.  A good rule of thumb is that for immutable types, all initialization should take place in :c:member:`~PyTypeObject.tp_new`, while for mutable types, most initialization should be deferred to :c:member:`~PyTypeObject.tp_init`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1618
msgid "This field is inherited by subtypes, except it is not inherited by static types whose :c:member:`~PyTypeObject.tp_base` is *NULL* or ``&PyBaseObject_Type``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1623
msgid "For static types this field has no default.  This means if the slot is defined as *NULL*, the type cannot be called to create new instances; presumably there is some other way to create instances, like a factory function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1631
msgid "An optional pointer to an instance deallocation function.  Its signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1635
msgid "An initializer that is compatible with this signature is :c:func:`PyObject_Free`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1639
msgid "This field is inherited by static subtypes, but not by dynamic subtypes (subtypes created by a class statement)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1644
msgid "In dynamic subtypes, this field is set to a deallocator suitable to match :c:func:`PyType_GenericAlloc` and the value of the :const:`Py_TPFLAGS_HAVE_GC` flag bit."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1648
msgid "For static subtypes, :c:type:`PyBaseObject_Type` uses PyObject_Del."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1653
msgid "An optional pointer to a function called by the garbage collector."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1655
msgid "The garbage collector needs to know whether a particular object is collectible or not.  Normally, it is sufficient to look at the object's type's :c:member:`~PyTypeObject.tp_flags` field, and check the :const:`Py_TPFLAGS_HAVE_GC` flag bit.  But some types have a mixture of statically and dynamically allocated instances, and the statically allocated instances are not collectible.  Such types should define this function; it should return ``1`` for a collectible instance, and ``0`` for a non-collectible instance. The signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1665
msgid "(The only example of this are types themselves.  The metatype, :c:data:`PyType_Type`, defines this function to distinguish between statically and dynamically allocated types.)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1675
msgid "This slot has no default.  If this field is *NULL*, :const:`Py_TPFLAGS_HAVE_GC` is used as the functional equivalent."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1681
msgid "Tuple of base types."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1683
msgid "This is set for types created by a class statement.  It should be *NULL* for statically defined types."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1688
#: ../cpython/Doc/c-api/typeobj.rst:1709
#: ../cpython/Doc/c-api/typeobj.rst:1718
#: ../cpython/Doc/c-api/typeobj.rst:1728
#: ../cpython/Doc/c-api/typeobj.rst:1742
msgid "This field is not inherited."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1693
msgid "Tuple containing the expanded set of base types, starting with the type itself and ending with :class:`object`, in Method Resolution Order."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1699
msgid "This field is not inherited; it is calculated fresh by :c:func:`PyType_Ready`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1705
msgid "Unused.  Internal use only."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1714
msgid "List of weak references to subclasses.  Internal use only."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1723
msgid "Weak reference list head, for weak references to this type object.  Not inherited.  Internal use only."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1733
msgid "This field is deprecated.  Use :c:member:`~PyTypeObject.tp_finalize` instead."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1738
msgid "Used to index into the method cache.  Internal use only."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1747
msgid "An optional pointer to an instance finalization function.  Its signature is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1751
msgid "If :c:member:`~PyTypeObject.tp_finalize` is set, the interpreter calls it once when finalizing an instance.  It is called either from the garbage collector (if the instance is part of an isolated reference cycle) or just before the object is deallocated.  Either way, it is guaranteed to be called before attempting to break reference cycles, ensuring that it finds the object in a sane state."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1758
msgid ":c:member:`~PyTypeObject.tp_finalize` should not mutate the current exception status; therefore, a recommended way to write a non-trivial finalizer is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1775
msgid "For this field to be taken into account (even through inheritance), you must also set the :const:`Py_TPFLAGS_HAVE_FINALIZE` flags bit."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1784
msgid "\"Safe object finalization\" (:pep:`442`)"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1787
msgid "The remaining fields are only defined if the feature test macro :const:`COUNT_ALLOCS` is defined, and are for internal use only. They are documented here for completeness.  None of these fields are inherited by subtypes."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1794
msgid "Number of allocations."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1798
msgid "Number of frees."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1802
msgid "Maximum simultaneously allocated objects."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1806
msgid "Pointer to the previous type object with a non-zero :c:member:`~PyTypeObject.tp_allocs` field."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1810
msgid "Pointer to the next type object with a non-zero :c:member:`~PyTypeObject.tp_allocs` field."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1812
msgid "Also, note that, in a garbage collected Python, :c:member:`~PyTypeObject.tp_dealloc` may be called from any Python thread, not just the thread which created the object (if the object becomes part of a refcount cycle, that cycle might be collected by a garbage collection on any thread).  This is not a problem for Python API calls, since the thread on which tp_dealloc is called will own the Global Interpreter Lock (GIL). However, if the object being destroyed in turn destroys objects from some other C or C++ library, care should be taken to ensure that destroying those objects on the thread which called tp_dealloc will not violate any assumptions of the library."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1824
msgid "Heap Types"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1826
msgid "In addition to defining Python types statically, you can define them dynamically (i.e. to the heap) using  :c:func:`PyType_FromSpec` and :c:func:`PyType_FromSpecWithBases`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1838
msgid "Number Object Structures"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1845
msgid "This structure holds pointers to the functions which an object uses to implement the number protocol.  Each function is used by the function of similar name documented in the :ref:`number` section."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1851
#: ../cpython/Doc/c-api/typeobj.rst:2175
msgid "Here is the structure definition::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1898
msgid "Binary and ternary functions must check the type of all their operands, and implement the necessary conversions (at least one of the operands is an instance of the defined type).  If the operation is not defined for the given operands, binary and ternary functions must return ``Py_NotImplemented``, if another error occurred they must return *NULL* and set an exception."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1907
msgid "The :c:data:`nb_reserved` field should always be *NULL*.  It was previously called :c:data:`nb_long`, and was renamed in Python 3.0.1."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1952
msgid "Mapping Object Structures"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1959
msgid "This structure holds pointers to the functions which an object uses to implement the mapping protocol.  It has three members:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1964
msgid "This function is used by :c:func:`PyMapping_Size` and :c:func:`PyObject_Size`, and has the same signature.  This slot may be set to *NULL* if the object has no defined length."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1970
msgid "This function is used by :c:func:`PyObject_GetItem` and :c:func:`PySequence_GetSlice`, and has the same signature as :c:func:`!PyObject_GetItem`.  This slot must be filled for the :c:func:`PyMapping_Check` function to return ``1``, it can be *NULL* otherwise."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1978
msgid "This function is used by :c:func:`PyObject_SetItem`, :c:func:`PyObject_DelItem`, :c:func:`PyObject_SetSlice` and :c:func:`PyObject_DelSlice`.  It has the same signature as :c:func:`!PyObject_SetItem`, but *v* can also be set to *NULL* to delete an item.  If this slot is *NULL*, the object does not support item assignment and deletion."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1989
msgid "Sequence Object Structures"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:1996
msgid "This structure holds pointers to the functions which an object uses to implement the sequence protocol."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2001
msgid "This function is used by :c:func:`PySequence_Size` and :c:func:`PyObject_Size`, and has the same signature.  It is also used for handling negative indices via the :c:member:`~PySequenceMethods.sq_item` and the :c:member:`~PySequenceMethods.sq_ass_item` slots."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2008
msgid "This function is used by :c:func:`PySequence_Concat` and has the same signature.  It is also used by the ``+`` operator, after trying the numeric addition via the :c:member:`~PyNumberMethods.nb_add` slot."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2014
msgid "This function is used by :c:func:`PySequence_Repeat` and has the same signature.  It is also used by the ``*`` operator, after trying numeric multiplication via the :c:member:`~PyNumberMethods.nb_multiply` slot."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2020
msgid "This function is used by :c:func:`PySequence_GetItem` and has the same signature.  It is also used by :c:func:`PyObject_GetItem`, after trying the subscription via the :c:member:`~PyMappingMethods.mp_subscript` slot. This slot must be filled for the :c:func:`PySequence_Check` function to return ``1``, it can be *NULL* otherwise."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2026
msgid "Negative indexes are handled as follows: if the :attr:`sq_length` slot is filled, it is called and the sequence length is used to compute a positive index which is passed to :attr:`sq_item`.  If :attr:`sq_length` is *NULL*, the index is passed as is to the function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2033
msgid "This function is used by :c:func:`PySequence_SetItem` and has the same signature.  It is also used by :c:func:`PyObject_SetItem` and :c:func:`PyObject_DelItem`, after trying the item assignment and deletion via the :c:member:`~PyMappingMethods.mp_ass_subscript` slot. This slot may be left to *NULL* if the object does not support item assignment and deletion."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2042
msgid "This function may be used by :c:func:`PySequence_Contains` and has the same signature.  This slot may be left to *NULL*, in this case :c:func:`!PySequence_Contains` simply traverses the sequence until it finds a match."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2049
msgid "This function is used by :c:func:`PySequence_InPlaceConcat` and has the same signature.  It should modify its first operand, and return it.  This slot may be left to *NULL*, in this case :c:func:`!PySequence_InPlaceConcat` will fall back to :c:func:`PySequence_Concat`.  It is also used by the augmented assignment ``+=``, after trying numeric inplace addition via the :c:member:`~PyNumberMethods.nb_inplace_add` slot."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2058
msgid "This function is used by :c:func:`PySequence_InPlaceRepeat` and has the same signature.  It should modify its first operand, and return it.  This slot may be left to *NULL*, in this case :c:func:`!PySequence_InPlaceRepeat` will fall back to :c:func:`PySequence_Repeat`.  It is also used by the augmented assignment ``*=``, after trying numeric inplace multiplication via the :c:member:`~PyNumberMethods.nb_inplace_multiply` slot."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2069
msgid "Buffer Object Structures"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2077
msgid "This structure holds pointers to the functions required by the :ref:`Buffer protocol <bufferobjects>`. The protocol defines how an exporter object can expose its internal data to consumer objects."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2083
#: ../cpython/Doc/c-api/typeobj.rst:2132
#: ../cpython/Doc/c-api/typeobj.rst:2185
#: ../cpython/Doc/c-api/typeobj.rst:2196
#: ../cpython/Doc/c-api/typeobj.rst:2207
msgid "The signature of this function is::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2087
msgid "Handle a request to *exporter* to fill in *view* as specified by *flags*. Except for point (3), an implementation of this function MUST take these steps:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2091
msgid "Check if the request can be met. If not, raise :c:data:`PyExc_BufferError`, set :c:data:`view->obj` to *NULL* and return ``-1``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2094
msgid "Fill in the requested fields."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2096
msgid "Increment an internal counter for the number of exports."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2098
msgid "Set :c:data:`view->obj` to *exporter* and increment :c:data:`view->obj`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2100
msgid "Return ``0``."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2102
msgid "If *exporter* is part of a chain or tree of buffer providers, two main schemes can be used:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2105
msgid "Re-export: Each member of the tree acts as the exporting object and sets :c:data:`view->obj` to a new reference to itself."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2108
msgid "Redirect: The buffer request is redirected to the root object of the tree. Here, :c:data:`view->obj` will be a new reference to the root object."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2112
msgid "The individual fields of *view* are described in section :ref:`Buffer structure <buffer-structure>`, the rules how an exporter must react to specific requests are in section :ref:`Buffer request types <buffer-request-types>`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2117
msgid "All memory pointed to in the :c:type:`Py_buffer` structure belongs to the exporter and must remain valid until there are no consumers left. :c:member:`~Py_buffer.format`, :c:member:`~Py_buffer.shape`, :c:member:`~Py_buffer.strides`, :c:member:`~Py_buffer.suboffsets` and :c:member:`~Py_buffer.internal` are read-only for the consumer."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2124
msgid ":c:func:`PyBuffer_FillInfo` provides an easy way of exposing a simple bytes buffer while dealing correctly with all request types."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2127
msgid ":c:func:`PyObject_GetBuffer` is the interface for the consumer that wraps this function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2136
msgid "Handle a request to release the resources of the buffer. If no resources need to be released, :c:member:`PyBufferProcs.bf_releasebuffer` may be *NULL*. Otherwise, a standard implementation of this function will take these optional steps:"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2141
msgid "Decrement an internal counter for the number of exports."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2143
msgid "If the counter is ``0``, free all memory associated with *view*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2145
msgid "The exporter MUST use the :c:member:`~Py_buffer.internal` field to keep track of buffer-specific resources. This field is guaranteed to remain constant, while a consumer MAY pass a copy of the original buffer as the *view* argument."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2151
msgid "This function MUST NOT decrement :c:data:`view->obj`, since that is done automatically in :c:func:`PyBuffer_Release` (this scheme is useful for breaking reference cycles)."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2156
msgid ":c:func:`PyBuffer_Release` is the interface for the consumer that wraps this function."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2164
msgid "Async Object Structures"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2172
msgid "This structure holds pointers to the functions required to implement :term:`awaitable` and :term:`asynchronous iterator` objects."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2189
msgid "The returned object must be an iterator, i.e. :c:func:`PyIter_Check` must return ``1`` for it."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2192
msgid "This slot may be set to *NULL* if an object is not an :term:`awaitable`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2200
msgid "Must return an :term:`awaitable` object.  See :meth:`__anext__` for details."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2202
msgid "This slot may be set to *NULL* if an object does not implement asynchronous iteration protocol."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2211
msgid "Must return an :term:`awaitable` object.  See :meth:`__anext__` for details. This slot may be set to *NULL*."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2218
msgid "Slot Type typedefs"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2222
msgid "The purpose of this function is to separate memory allocation from memory initialization.  It should return a pointer to a block of memory of adequate length for the instance, suitably aligned, and initialized to zeros, but with :attr:`ob_refcnt` set to ``1`` and :attr:`ob_type` set to the type argument.  If the type's :c:member:`~PyTypeObject.tp_itemsize` is non-zero, the object's :attr:`ob_size` field should be initialized to *nitems* and the length of the allocated memory block should be ``tp_basicsize + nitems*tp_itemsize``, rounded up to a multiple of ``sizeof(void*)``; otherwise, *nitems* is not used and the length of the block should be :c:member:`~PyTypeObject.tp_basicsize`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2232
msgid "This function should not do any other instance initialization, not even to allocate additional memory; that should be done by :c:member:`~PyTypeObject.tp_new`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2239
msgid "See :c:member:`~PyTypeObject.tp_free`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2243
msgid "See :c:member:`~PyTypeObject.tp_new`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2247
msgid "See :c:member:`~PyTypeObject.tp_init`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2251
msgid "See :c:member:`~PyTypeObject.tp_repr`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2255
msgid "This is hidden if :const:`PY_LIMITED_API` is set."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2259
#: ../cpython/Doc/c-api/typeobj.rst:2268
msgid "Return the value of the named attribute for the object."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2263
#: ../cpython/Doc/c-api/typeobj.rst:2274
msgid "Set the value of the named attribute for the object. The value argument is set to *NULL* to delete the attribute."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2270
msgid "See :c:member:`~PyTypeObject.tp_getattro`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2277
msgid "See :c:member:`~PyTypeObject.tp_setattro`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2281
msgid "See :c:member:`~PyTypeObject.tp_descrget`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2285
msgid "See :c:member:`~PyTypeObject.tp_descrset`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2289
msgid "See :c:member:`~PyTypeObject.tp_hash`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2293
msgid "See :c:member:`~PyTypeObject.tp_richcompare`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2297
msgid "See :c:member:`~PyTypeObject.tp_iter`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2301
msgid "See :c:member:`~PyTypeObject.tp_iternext`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2327
msgid "Examples"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2329
msgid "The following are simple examples of Python type definitions.  They include common usage you may encounter.  Some demonstrate tricky corner cases.  For more examples, practical info, and a tutorial, see :ref:`defining-new-types` and :ref:`new-types-topics`."
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2334
msgid "A basic static type::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2351
msgid "You may also find older code (especially in the CPython code base) with a more verbose initializer::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2395
msgid "A type that supports weakrefs, instance dicts, and hashing::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2422
msgid "A str subclass that cannot be subclassed and cannot be called to create instances (e.g. uses a separate factory func)::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2441
msgid "The simplest static type (with fixed-length instances)::"
msgstr ""

#: ../cpython/Doc/c-api/typeobj.rst:2452
msgid "The simplest static type (with variable-length instances)::"
msgstr ""

